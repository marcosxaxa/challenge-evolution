* 
* ==> Audit <==
* |---------|------|---------|------|---------|------------|----------|
| Command | Args | Profile | User | Version | Start Time | End Time |
|---------|------|---------|------|---------|------------|----------|
|---------|------|---------|------|---------|------------|----------|

* 
* ==> Last Start <==
* Log file created at: 2021/09/04 11:27:48
Running on machine: marcos-laptop
Binary: Built with gc go1.17 for linux/amd64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0904 11:27:48.556054   57293 out.go:298] Setting OutFile to fd 1 ...
I0904 11:27:48.556177   57293 out.go:350] isatty.IsTerminal(1) = true
I0904 11:27:48.556180   57293 out.go:311] Setting ErrFile to fd 2...
I0904 11:27:48.556184   57293 out.go:350] isatty.IsTerminal(2) = true
I0904 11:27:48.556268   57293 root.go:313] Updating PATH: /home/marcos/.minikube/bin
I0904 11:27:48.559415   57293 out.go:305] Setting JSON to false
I0904 11:27:48.584650   57293 start.go:111] hostinfo: {"hostname":"marcos-laptop","uptime":17025,"bootTime":1630748644,"procs":361,"os":"linux","platform":"ubuntu","platformFamily":"debian","platformVersion":"20.04","kernelVersion":"5.4.0-81-generic","kernelArch":"x86_64","virtualizationSystem":"kvm","virtualizationRole":"host","hostId":"2a668678-4da1-45ba-8f15-ba99c4f60241"}
I0904 11:27:48.584709   57293 start.go:121] virtualization: kvm host
I0904 11:27:48.589325   57293 out.go:177] üòÑ  minikube v1.23.0 on Ubuntu 20.04
I0904 11:27:48.589457   57293 notify.go:169] Checking for updates...
I0904 11:27:48.592582   57293 config.go:177] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.18.2
I0904 11:27:48.596901   57293 out.go:177] üÜï  Kubernetes 1.22.1 is now available. If you would like to upgrade, specify: --kubernetes-version=v1.22.1
I0904 11:27:48.596937   57293 driver.go:343] Setting default libvirt URI to qemu:///system
I0904 11:27:51.982913   57293 docker.go:132] docker version: linux-20.10.7
I0904 11:27:51.982990   57293 cli_runner.go:115] Run: docker system info --format "{{json .}}"
I0904 11:27:52.015282   57293 info.go:263] docker info: {ID:HXRF:XR5J:SDXW:OXP2:YG2V:WUCJ:VSWM:GATG:IO6C:T6XF:VFRE:TYYA Containers:5 ContainersRunning:5 ContainersPaused:0 ContainersStopped:0 Images:5 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:false KernelMemory:true KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:62 OomKillDisable:true NGoroutines:64 SystemTime:2021-09-04 11:27:52.007250084 -0300 -03 LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:0 KernelVersion:5.4.0-81-generic OperatingSystem:Ubuntu 20.04.3 LTS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:8 MemTotal:16492343296 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:marcos-laptop Labels:[] ExperimentalBuild:false ServerVersion:20.10.7 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID: Expected:} RuncCommit:{ID: Expected:} InitCommit:{ID: Expected:} SecurityOptions:[name=apparmor name=seccomp,profile=default] ProductLicense: Warnings:[WARNING: No swap limit support] ServerErrors:[] ClientInfo:{Debug:false Plugins:[] Warnings:<nil>}}
I0904 11:27:52.015343   57293 docker.go:237] overlay module found
I0904 11:27:52.030108   57293 out.go:177] ‚ú®  Using the docker driver based on existing profile
I0904 11:27:52.030130   57293 start.go:278] selected driver: docker
I0904 11:27:52.030134   57293 start.go:751] validating driver "docker" against &{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438 Memory:3900 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.99.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser: SSHKey: SSHPort:0 KubernetesConfig:{KubernetesVersion:v1.18.2 ClusterName:minikube Namespace: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin: FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: ExtraOptions:[{Component:kubeadm Key:pod-network-cidr Value:10.244.0.0/16}] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:172.17.0.3 Port:8443 KubernetesVersion:v1.18.2 ControlPlane:true Worker:true}] Addons:map[dashboard:true default-storageclass:true efk:false freshpod:false gvisor:false helm-tiller:false ingress:false ingress-dns:false istio:false istio-provisioner:false logviewer:false metallb:false metrics-server:false nvidia-driver-installer:false nvidia-gpu-device-plugin:false registry:false registry-aliases:false registry-creds:false storage-provisioner:true storage-provisioner-gluster:false] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: MultiNodeRequested:false ExtraDisks:0}
I0904 11:27:52.030207   57293 start.go:762] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc:}
W0904 11:27:52.030233   57293 oci.go:119] Your kernel does not support memory limit capabilities or the cgroup is not mounted.
W0904 11:27:52.030241   57293 out.go:242] ‚ùó  Your cgroup does not allow setting memory.
I0904 11:27:52.038102   57293 out.go:177]     ‚ñ™ More information: https://docs.docker.com/engine/install/linux-postinstall/#your-kernel-does-not-support-cgroup-swap-limit-capabilities
I0904 11:27:52.038648   57293 cli_runner.go:115] Run: docker system info --format "{{json .}}"
I0904 11:27:52.076992   57293 info.go:263] docker info: {ID:HXRF:XR5J:SDXW:OXP2:YG2V:WUCJ:VSWM:GATG:IO6C:T6XF:VFRE:TYYA Containers:5 ContainersRunning:5 ContainersPaused:0 ContainersStopped:0 Images:5 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:false KernelMemory:true KernelMemoryTCP:true CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:62 OomKillDisable:true NGoroutines:64 SystemTime:2021-09-04 11:27:52.066609176 -0300 -03 LoggingDriver:json-file CgroupDriver:cgroupfs NEventsListener:0 KernelVersion:5.4.0-81-generic OperatingSystem:Ubuntu 20.04.3 LTS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:8 MemTotal:16492343296 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:marcos-laptop Labels:[] ExperimentalBuild:false ServerVersion:20.10.7 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID: Expected:} RuncCommit:{ID: Expected:} InitCommit:{ID: Expected:} SecurityOptions:[name=apparmor name=seccomp,profile=default] ProductLicense: Warnings:[WARNING: No swap limit support] ServerErrors:[] ClientInfo:{Debug:false Plugins:[] Warnings:<nil>}}
W0904 11:27:52.077071   57293 oci.go:119] Your kernel does not support memory limit capabilities or the cgroup is not mounted.
W0904 11:27:52.077084   57293 out.go:242] ‚ùó  Your cgroup does not allow setting memory.
I0904 11:27:52.083542   57293 out.go:177]     ‚ñ™ More information: https://docs.docker.com/engine/install/linux-postinstall/#your-kernel-does-not-support-cgroup-swap-limit-capabilities
W0904 11:27:52.083626   57293 out.go:242] ‚ùó  You cannot change the memory size for an existing minikube cluster. Please first delete the cluster.
I0904 11:27:52.083666   57293 cni.go:93] Creating CNI manager for ""
I0904 11:27:52.083683   57293 cni.go:167] CNI unnecessary in this configuration, recommending no CNI
I0904 11:27:52.083690   57293 start_flags.go:278] config:
{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438 Memory:3900 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.99.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser: SSHKey: SSHPort:0 KubernetesConfig:{KubernetesVersion:v1.18.2 ClusterName:minikube Namespace: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin: FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: ExtraOptions:[{Component:kubeadm Key:pod-network-cidr Value:10.244.0.0/16}] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:172.17.0.3 Port:8443 KubernetesVersion:v1.18.2 ControlPlane:true Worker:true}] Addons:map[dashboard:true default-storageclass:true efk:false freshpod:false gvisor:false helm-tiller:false ingress:false ingress-dns:false istio:false istio-provisioner:false logviewer:false metallb:false metrics-server:false nvidia-driver-installer:false nvidia-gpu-device-plugin:false registry:false registry-aliases:false registry-creds:false storage-provisioner:true storage-provisioner-gluster:false] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: MultiNodeRequested:false ExtraDisks:0}
I0904 11:27:52.093367   57293 out.go:177] üëç  Starting control plane node minikube in cluster minikube
I0904 11:27:52.093402   57293 cache.go:117] Beginning downloading kic base image for docker with docker
I0904 11:27:52.106115   57293 out.go:177] üöú  Pulling base image ...
I0904 11:27:52.106160   57293 preload.go:131] Checking if preload exists for k8s version v1.18.2 and runtime docker
I0904 11:27:52.106237   57293 image.go:75] Checking for gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438 in local docker daemon
I0904 11:27:52.205686   57293 cache.go:145] Downloading gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438 to local cache
I0904 11:27:52.205946   57293 image.go:59] Checking for gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438 in local cache directory
I0904 11:27:52.207382   57293 image.go:119] Writing gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438 to local cache
W0904 11:27:52.639365   57293 preload.go:114] https://storage.googleapis.com/minikube-preloaded-volume-tarballs/preloaded-images-k8s-v12-v1.18.2-docker-overlay2-amd64.tar.lz4 status code: 404
I0904 11:27:52.639458   57293 profile.go:148] Saving config to /home/marcos/.minikube/profiles/minikube/config.json ...
I0904 11:27:52.639532   57293 cache.go:108] acquiring lock: {Name:mk26ece53427e57784a45444dca8310ce9694e4a Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0904 11:27:52.639532   57293 cache.go:108] acquiring lock: {Name:mk2df6046ec127bf9b84b75e7ecceb6df67b457f Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0904 11:27:52.639534   57293 cache.go:108] acquiring lock: {Name:mkdb836e840c8b040826cf1fe6ad4c0f3d2f6610 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0904 11:27:52.639543   57293 cache.go:108] acquiring lock: {Name:mk433b45972c2f3e79a588274c9b3c6a4217c928 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0904 11:27:52.639576   57293 cache.go:108] acquiring lock: {Name:mk4c90cba34e0f8c297ef53e2c95a527524434a8 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0904 11:27:52.639827   57293 cache.go:108] acquiring lock: {Name:mk385f006b5f654627997867ac97f3766cf5e0b9 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0904 11:27:52.639962   57293 cache.go:108] acquiring lock: {Name:mk6a0003b50ade3a64dadb9df7ba4df82d097a40 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0904 11:27:52.639592   57293 cache.go:108] acquiring lock: {Name:mkb215fd7221e5fa048141423426fcdc8df563e1 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0904 11:27:52.640058   57293 cache.go:108] acquiring lock: {Name:mkf7ff10b702442a788ee1bec11fa91af5fe0d0c Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0904 11:27:52.640131   57293 image.go:135] retrieving image: docker.io/kubernetesui/dashboard:v2.1.0
I0904 11:27:52.640246   57293 cache.go:108] acquiring lock: {Name:mk92266738be968628b1fd0d0b9c5d5cc2e8a4a1 Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0904 11:27:52.640486   57293 image.go:135] retrieving image: docker.io/kubernetesui/metrics-scraper:v1.0.4
I0904 11:27:52.641133   57293 image.go:135] retrieving image: gcr.io/k8s-minikube/storage-provisioner:v5
I0904 11:27:52.641247   57293 image.go:135] retrieving image: k8s.gcr.io/etcd:3.4.3-0
I0904 11:27:52.641263   57293 image.go:177] daemon lookup for docker.io/kubernetesui/dashboard:v2.1.0: Error response from daemon: reference does not exist
I0904 11:27:52.641354   57293 image.go:135] retrieving image: k8s.gcr.io/kube-scheduler:v1.18.2
I0904 11:27:52.641470   57293 image.go:177] daemon lookup for docker.io/kubernetesui/metrics-scraper:v1.0.4: Error response from daemon: reference does not exist
I0904 11:27:52.641589   57293 image.go:135] retrieving image: k8s.gcr.io/kube-proxy:v1.18.2
I0904 11:27:52.641789   57293 image.go:177] daemon lookup for gcr.io/k8s-minikube/storage-provisioner:v5: Error response from daemon: reference does not exist
I0904 11:27:52.641877   57293 image.go:177] daemon lookup for k8s.gcr.io/kube-scheduler:v1.18.2: Error response from daemon: reference does not exist
I0904 11:27:52.641890   57293 image.go:177] daemon lookup for k8s.gcr.io/etcd:3.4.3-0: Error response from daemon: reference does not exist
I0904 11:27:52.642132   57293 image.go:177] daemon lookup for k8s.gcr.io/kube-proxy:v1.18.2: Error response from daemon: reference does not exist
I0904 11:27:52.642429   57293 image.go:135] retrieving image: k8s.gcr.io/kube-apiserver:v1.18.2
I0904 11:27:52.642445   57293 image.go:135] retrieving image: k8s.gcr.io/coredns:1.6.7
I0904 11:27:52.642467   57293 image.go:135] retrieving image: k8s.gcr.io/pause:3.2
I0904 11:27:52.642589   57293 image.go:135] retrieving image: k8s.gcr.io/kube-controller-manager:v1.18.2
I0904 11:27:52.643039   57293 image.go:177] daemon lookup for k8s.gcr.io/pause:3.2: Error response from daemon: reference does not exist
I0904 11:27:52.643159   57293 image.go:177] daemon lookup for k8s.gcr.io/coredns:1.6.7: Error response from daemon: reference does not exist
I0904 11:27:52.643175   57293 image.go:177] daemon lookup for k8s.gcr.io/kube-apiserver:v1.18.2: Error response from daemon: reference does not exist
I0904 11:27:52.643175   57293 image.go:177] daemon lookup for k8s.gcr.io/kube-controller-manager:v1.18.2: Error response from daemon: reference does not exist
I0904 11:27:55.079906   57293 cache.go:162] opening:  /home/marcos/.minikube/cache/images/docker.io/kubernetesui/metrics-scraper_v1.0.4
I0904 11:27:55.084290   57293 cache.go:162] opening:  /home/marcos/.minikube/cache/images/docker.io/kubernetesui/dashboard_v2.1.0
I0904 11:27:56.315395   57293 cache.go:162] opening:  /home/marcos/.minikube/cache/images/gcr.io/k8s-minikube/storage-provisioner_v5
I0904 11:27:56.516442   57293 cache.go:162] opening:  /home/marcos/.minikube/cache/images/k8s.gcr.io/kube-controller-manager_v1.18.2
I0904 11:27:57.196364   57293 cache.go:162] opening:  /home/marcos/.minikube/cache/images/k8s.gcr.io/pause_3.2
I0904 11:27:57.196443   57293 cache.go:162] opening:  /home/marcos/.minikube/cache/images/k8s.gcr.io/kube-proxy_v1.18.2
I0904 11:27:57.517368   57293 cache.go:162] opening:  /home/marcos/.minikube/cache/images/k8s.gcr.io/etcd_3.4.3-0
I0904 11:27:57.517405   57293 cache.go:162] opening:  /home/marcos/.minikube/cache/images/k8s.gcr.io/kube-scheduler_v1.18.2
I0904 11:27:57.772283   57293 cache.go:162] opening:  /home/marcos/.minikube/cache/images/k8s.gcr.io/coredns_1.6.7
I0904 11:27:57.803249   57293 cache.go:162] opening:  /home/marcos/.minikube/cache/images/k8s.gcr.io/kube-apiserver_v1.18.2
I0904 11:27:59.644046   57293 cache.go:157] /home/marcos/.minikube/cache/images/docker.io/kubernetesui/metrics-scraper_v1.0.4 exists
I0904 11:27:59.644066   57293 cache.go:97] cache image "docker.io/kubernetesui/metrics-scraper:v1.0.4" -> "/home/marcos/.minikube/cache/images/docker.io/kubernetesui/metrics-scraper_v1.0.4" took 7.004537574s
I0904 11:27:59.644073   57293 cache.go:81] save to tar file docker.io/kubernetesui/metrics-scraper:v1.0.4 -> /home/marcos/.minikube/cache/images/docker.io/kubernetesui/metrics-scraper_v1.0.4 succeeded
I0904 11:28:02.713889   57293 cache.go:157] /home/marcos/.minikube/cache/images/k8s.gcr.io/pause_3.2 exists
I0904 11:28:02.713912   57293 cache.go:97] cache image "k8s.gcr.io/pause:3.2" -> "/home/marcos/.minikube/cache/images/k8s.gcr.io/pause_3.2" took 10.073674732s
I0904 11:28:02.713922   57293 cache.go:81] save to tar file k8s.gcr.io/pause:3.2 -> /home/marcos/.minikube/cache/images/k8s.gcr.io/pause_3.2 succeeded
I0904 11:28:13.200090   57293 cache.go:157] /home/marcos/.minikube/cache/images/docker.io/kubernetesui/dashboard_v2.1.0 exists
I0904 11:28:13.200111   57293 cache.go:97] cache image "docker.io/kubernetesui/dashboard:v2.1.0" -> "/home/marcos/.minikube/cache/images/docker.io/kubernetesui/dashboard_v2.1.0" took 20.560543421s
I0904 11:28:13.200117   57293 cache.go:81] save to tar file docker.io/kubernetesui/dashboard:v2.1.0 -> /home/marcos/.minikube/cache/images/docker.io/kubernetesui/dashboard_v2.1.0 succeeded
I0904 11:28:26.193458   57293 cache.go:157] /home/marcos/.minikube/cache/images/gcr.io/k8s-minikube/storage-provisioner_v5 exists
I0904 11:28:26.193516   57293 cache.go:97] cache image "gcr.io/k8s-minikube/storage-provisioner:v5" -> "/home/marcos/.minikube/cache/images/gcr.io/k8s-minikube/storage-provisioner_v5" took 33.553972661s
I0904 11:28:26.193540   57293 cache.go:81] save to tar file gcr.io/k8s-minikube/storage-provisioner:v5 -> /home/marcos/.minikube/cache/images/gcr.io/k8s-minikube/storage-provisioner_v5 succeeded
I0904 11:28:27.480354   57293 cache.go:157] /home/marcos/.minikube/cache/images/k8s.gcr.io/coredns_1.6.7 exists
I0904 11:28:27.480377   57293 cache.go:97] cache image "k8s.gcr.io/coredns:1.6.7" -> "/home/marcos/.minikube/cache/images/k8s.gcr.io/coredns_1.6.7" took 34.840848342s
I0904 11:28:27.480387   57293 cache.go:81] save to tar file k8s.gcr.io/coredns:1.6.7 -> /home/marcos/.minikube/cache/images/k8s.gcr.io/coredns_1.6.7 succeeded
I0904 11:28:41.211868   57293 cache.go:157] /home/marcos/.minikube/cache/images/k8s.gcr.io/kube-scheduler_v1.18.2 exists
I0904 11:28:41.211888   57293 cache.go:97] cache image "k8s.gcr.io/kube-scheduler:v1.18.2" -> "/home/marcos/.minikube/cache/images/k8s.gcr.io/kube-scheduler_v1.18.2" took 48.572314445s
I0904 11:28:41.211895   57293 cache.go:81] save to tar file k8s.gcr.io/kube-scheduler:v1.18.2 -> /home/marcos/.minikube/cache/images/k8s.gcr.io/kube-scheduler_v1.18.2 succeeded
I0904 11:28:46.440709   57293 cache.go:157] /home/marcos/.minikube/cache/images/k8s.gcr.io/kube-controller-manager_v1.18.2 exists
I0904 11:28:46.440757   57293 cache.go:97] cache image "k8s.gcr.io/kube-controller-manager:v1.18.2" -> "/home/marcos/.minikube/cache/images/k8s.gcr.io/kube-controller-manager_v1.18.2" took 53.801188638s
I0904 11:28:46.440774   57293 cache.go:81] save to tar file k8s.gcr.io/kube-controller-manager:v1.18.2 -> /home/marcos/.minikube/cache/images/k8s.gcr.io/kube-controller-manager_v1.18.2 succeeded
I0904 11:28:48.071240   57293 cache.go:157] /home/marcos/.minikube/cache/images/k8s.gcr.io/kube-apiserver_v1.18.2 exists
I0904 11:28:48.071266   57293 cache.go:97] cache image "k8s.gcr.io/kube-apiserver:v1.18.2" -> "/home/marcos/.minikube/cache/images/k8s.gcr.io/kube-apiserver_v1.18.2" took 55.431210484s
I0904 11:28:48.071276   57293 cache.go:81] save to tar file k8s.gcr.io/kube-apiserver:v1.18.2 -> /home/marcos/.minikube/cache/images/k8s.gcr.io/kube-apiserver_v1.18.2 succeeded
I0904 11:28:54.194875   57293 cache.go:157] /home/marcos/.minikube/cache/images/k8s.gcr.io/kube-proxy_v1.18.2 exists
I0904 11:28:54.194943   57293 cache.go:97] cache image "k8s.gcr.io/kube-proxy:v1.18.2" -> "/home/marcos/.minikube/cache/images/k8s.gcr.io/kube-proxy_v1.18.2" took 1m1.555412836s
I0904 11:28:54.194966   57293 cache.go:81] save to tar file k8s.gcr.io/kube-proxy:v1.18.2 -> /home/marcos/.minikube/cache/images/k8s.gcr.io/kube-proxy_v1.18.2 succeeded
I0904 11:29:03.530027   57293 cache.go:157] /home/marcos/.minikube/cache/images/k8s.gcr.io/etcd_3.4.3-0 exists
I0904 11:29:03.530086   57293 cache.go:97] cache image "k8s.gcr.io/etcd:3.4.3-0" -> "/home/marcos/.minikube/cache/images/k8s.gcr.io/etcd_3.4.3-0" took 1m10.890123133s
I0904 11:29:03.530106   57293 cache.go:81] save to tar file k8s.gcr.io/etcd:3.4.3-0 -> /home/marcos/.minikube/cache/images/k8s.gcr.io/etcd_3.4.3-0 succeeded
I0904 11:29:03.530134   57293 cache.go:88] Successfully saved all images to host disk.
I0904 11:29:50.783243   57293 cache.go:148] successfully saved gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438 as a tarball
I0904 11:29:50.783251   57293 cache.go:159] Loading gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438 from local cache
I0904 11:30:03.135722   57293 cache.go:162] successfully loaded gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438 from cached tarball
I0904 11:30:03.135741   57293 cache.go:205] Successfully downloaded all kic artifacts
I0904 11:30:03.135764   57293 start.go:313] acquiring machines lock for minikube: {Name:mk6aa53b52e479ee3d62c51a78d28fb04daac8aa Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0904 11:30:03.135848   57293 start.go:317] acquired machines lock for "minikube" in 75.066¬µs
I0904 11:30:03.135858   57293 start.go:93] Skipping create...Using existing machine configuration
I0904 11:30:03.135863   57293 fix.go:55] fixHost starting: 
I0904 11:30:03.136012   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:03.162252   57293 cli_runner.go:162] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0904 11:30:03.162294   57293 fix.go:108] recreateIfNeeded on minikube: state= err=unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:03.162301   57293 fix.go:113] machineExists: false. err=machine does not exist
I0904 11:30:03.183871   57293 out.go:177] ü§∑  docker "minikube" container is missing, will recreate.
I0904 11:30:03.183939   57293 delete.go:124] DEMOLISHING minikube ...
I0904 11:30:03.184119   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:03.241528   57293 cli_runner.go:162] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
W0904 11:30:03.241555   57293 stop.go:75] unable to get state: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:03.241563   57293 delete.go:129] stophost failed (probably ok): ssh power off: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:03.241840   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:03.269934   57293 cli_runner.go:162] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0904 11:30:03.269965   57293 delete.go:82] Unable to get host status for minikube, assuming it has already been deleted: state: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:03.269995   57293 cli_runner.go:115] Run: docker container inspect -f {{.Id}} minikube
W0904 11:30:03.296712   57293 cli_runner.go:162] docker container inspect -f {{.Id}} minikube returned with exit code 1
I0904 11:30:03.296725   57293 kic.go:360] could not find the container minikube to remove it. will try anyways
I0904 11:30:03.296751   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:03.322611   57293 cli_runner.go:162] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
W0904 11:30:03.322638   57293 oci.go:83] error getting container status, will try to delete anyways: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:03.322670   57293 cli_runner.go:115] Run: docker exec --privileged -t minikube /bin/bash -c "sudo init 0"
W0904 11:30:03.348447   57293 cli_runner.go:162] docker exec --privileged -t minikube /bin/bash -c "sudo init 0" returned with exit code 1
I0904 11:30:03.348464   57293 oci.go:635] error shutdown minikube: docker exec --privileged -t minikube /bin/bash -c "sudo init 0": exit status 1
stdout:

stderr:
Error: No such container: minikube
I0904 11:30:04.349046   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:04.390144   57293 cli_runner.go:162] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0904 11:30:04.390171   57293 oci.go:647] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:04.390176   57293 oci.go:649] temporary error: container minikube status is  but expect it to be exited
I0904 11:30:04.390192   57293 retry.go:31] will retry after 552.330144ms: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:04.942896   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:04.981082   57293 cli_runner.go:162] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0904 11:30:04.981146   57293 oci.go:647] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:04.981153   57293 oci.go:649] temporary error: container minikube status is  but expect it to be exited
I0904 11:30:04.981170   57293 retry.go:31] will retry after 1.080381816s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:06.062571   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:06.108966   57293 cli_runner.go:162] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0904 11:30:06.109005   57293 oci.go:647] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:06.109014   57293 oci.go:649] temporary error: container minikube status is  but expect it to be exited
I0904 11:30:06.109031   57293 retry.go:31] will retry after 1.31013006s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:07.419276   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:07.469485   57293 cli_runner.go:162] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0904 11:30:07.469512   57293 oci.go:647] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:07.469518   57293 oci.go:649] temporary error: container minikube status is  but expect it to be exited
I0904 11:30:07.469532   57293 retry.go:31] will retry after 1.582392691s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:09.052667   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:09.112387   57293 cli_runner.go:162] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0904 11:30:09.112415   57293 oci.go:647] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:09.112421   57293 oci.go:649] temporary error: container minikube status is  but expect it to be exited
I0904 11:30:09.112437   57293 retry.go:31] will retry after 2.340488664s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:11.454935   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:11.516803   57293 cli_runner.go:162] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0904 11:30:11.516831   57293 oci.go:647] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:11.516835   57293 oci.go:649] temporary error: container minikube status is  but expect it to be exited
I0904 11:30:11.516848   57293 retry.go:31] will retry after 4.506218855s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:16.023462   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:16.069097   57293 cli_runner.go:162] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0904 11:30:16.069126   57293 oci.go:647] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:16.069130   57293 oci.go:649] temporary error: container minikube status is  but expect it to be exited
I0904 11:30:16.069145   57293 retry.go:31] will retry after 3.221479586s: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:19.291445   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:19.347596   57293 cli_runner.go:162] docker container inspect minikube --format={{.State.Status}} returned with exit code 1
I0904 11:30:19.347622   57293 oci.go:647] temporary error verifying shutdown: unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
I0904 11:30:19.347626   57293 oci.go:649] temporary error: container minikube status is  but expect it to be exited
I0904 11:30:19.347644   57293 oci.go:87] couldn't shut down minikube (might be okay): verify shutdown: couldn't verify container is exited. %!v(MISSING): unknown state "minikube": docker container inspect minikube --format={{.State.Status}}: exit status 1
stdout:


stderr:
Error: No such container: minikube
 
I0904 11:30:19.347671   57293 cli_runner.go:115] Run: docker rm -f -v minikube
I0904 11:30:19.373952   57293 cli_runner.go:115] Run: docker container inspect -f {{.Id}} minikube
W0904 11:30:19.399430   57293 cli_runner.go:162] docker container inspect -f {{.Id}} minikube returned with exit code 1
I0904 11:30:19.399467   57293 cli_runner.go:115] Run: docker network inspect  --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0904 11:30:19.424850   57293 cli_runner.go:162] docker network inspect  --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0904 11:30:19.424899   57293 network_create.go:255] running [docker network inspect ] to gather additional debugging logs...
I0904 11:30:19.424915   57293 cli_runner.go:115] Run: docker network inspect 
W0904 11:30:19.450604   57293 cli_runner.go:162] docker network inspect  returned with exit code 1
I0904 11:30:19.450615   57293 network_create.go:258] error running [docker network inspect ]: docker network inspect : exit status 1
stdout:
[]

stderr:
Error: No such network: 
I0904 11:30:19.450622   57293 network_create.go:260] output of [docker network inspect ]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error: No such network: 

** /stderr **
W0904 11:30:19.452104   57293 delete.go:139] delete failed (probably ok) <nil>
I0904 11:30:19.452109   57293 fix.go:120] Sleeping 1 second for extra luck!
I0904 11:30:20.452857   57293 start.go:126] createHost starting for "" (driver="docker")
I0904 11:30:20.458588   57293 out.go:204] üî•  Creating docker container (CPUs=2, Memory=3900MB) ...
I0904 11:30:20.458956   57293 start.go:160] libmachine.API.Create for "minikube" (driver="docker")
I0904 11:30:20.459024   57293 client.go:168] LocalClient.Create starting
I0904 11:30:20.459633   57293 main.go:130] libmachine: Reading certificate data from /home/marcos/.minikube/certs/ca.pem
I0904 11:30:20.460026   57293 main.go:130] libmachine: Decoding PEM data...
I0904 11:30:20.460073   57293 main.go:130] libmachine: Parsing certificate...
I0904 11:30:20.460261   57293 main.go:130] libmachine: Reading certificate data from /home/marcos/.minikube/certs/cert.pem
I0904 11:30:20.460532   57293 main.go:130] libmachine: Decoding PEM data...
I0904 11:30:20.460581   57293 main.go:130] libmachine: Parsing certificate...
I0904 11:30:20.461155   57293 cli_runner.go:115] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0904 11:30:20.501885   57293 cli_runner.go:162] docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0904 11:30:20.501924   57293 network_create.go:255] running [docker network inspect minikube] to gather additional debugging logs...
I0904 11:30:20.501932   57293 cli_runner.go:115] Run: docker network inspect minikube
W0904 11:30:20.527668   57293 cli_runner.go:162] docker network inspect minikube returned with exit code 1
I0904 11:30:20.527680   57293 network_create.go:258] error running [docker network inspect minikube]: docker network inspect minikube: exit status 1
stdout:
[]

stderr:
Error: No such network: minikube
I0904 11:30:20.527686   57293 network_create.go:260] output of [docker network inspect minikube]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error: No such network: minikube

** /stderr **
I0904 11:30:20.527718   57293 cli_runner.go:115] Run: docker network inspect bridge --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0904 11:30:20.555086   57293 network.go:288] reserving subnet 192.168.49.0 for 1m0s: &{mu:{state:0 sema:0} read:{v:{m:map[] amended:true}} dirty:map[192.168.49.0:0xc000672f28] misses:0}
I0904 11:30:20.555107   57293 network.go:235] using free private subnet 192.168.49.0/24: &{IP:192.168.49.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.49.0/24 Gateway:192.168.49.1 ClientMin:192.168.49.2 ClientMax:192.168.49.254 Broadcast:192.168.49.255 Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:}}
I0904 11:30:20.555115   57293 network_create.go:106] attempt to create docker network minikube 192.168.49.0/24 with gateway 192.168.49.1 and MTU of 1500 ...
I0904 11:30:20.555148   57293 cli_runner.go:115] Run: docker network create --driver=bridge --subnet=192.168.49.0/24 --gateway=192.168.49.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true minikube
I0904 11:30:20.643361   57293 network_create.go:90] docker network minikube 192.168.49.0/24 created
I0904 11:30:20.643375   57293 kic.go:106] calculated static IP "192.168.49.2" for the "minikube" container
I0904 11:30:20.643444   57293 cli_runner.go:115] Run: docker ps -a --format {{.Names}}
I0904 11:30:20.674874   57293 cli_runner.go:115] Run: docker volume create minikube --label name.minikube.sigs.k8s.io=minikube --label created_by.minikube.sigs.k8s.io=true
I0904 11:30:20.704450   57293 oci.go:102] Successfully created a docker volume minikube
I0904 11:30:20.704505   57293 cli_runner.go:115] Run: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438 -d /var/lib
I0904 11:30:35.613462   57293 cli_runner.go:168] Completed: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438 -d /var/lib: (14.908937482s)
I0904 11:30:35.613473   57293 oci.go:106] Successfully prepared a docker volume minikube
W0904 11:30:35.613498   57293 oci.go:135] Your kernel does not support swap limit capabilities or the cgroup is not mounted.
W0904 11:30:35.613505   57293 oci.go:119] Your kernel does not support memory limit capabilities or the cgroup is not mounted.
I0904 11:30:35.613545   57293 cli_runner.go:115] Run: docker info --format "'{{json .SecurityOptions}}'"
I0904 11:30:35.613560   57293 preload.go:131] Checking if preload exists for k8s version v1.18.2 and runtime docker
I0904 11:30:35.659746   57293 cli_runner.go:115] Run: docker run -d -t --privileged --device /dev/fuse --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube --name minikube --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube --network minikube --ip 192.168.49.2 --volume minikube:/var --security-opt apparmor=unconfined --cpus=2 -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438
I0904 11:30:36.522902   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Running}}
I0904 11:30:36.589995   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
I0904 11:30:36.630517   57293 cli_runner.go:115] Run: docker exec minikube stat /var/lib/dpkg/alternatives/iptables
I0904 11:30:36.703509   57293 oci.go:281] the created container "minikube" has a running status.
I0904 11:30:36.703519   57293 kic.go:210] Creating ssh key for kic: /home/marcos/.minikube/machines/minikube/id_rsa...
I0904 11:30:36.983565   57293 kic_runner.go:188] docker (temp): /home/marcos/.minikube/machines/minikube/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0904 11:30:37.111530   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
I0904 11:30:37.148214   57293 kic_runner.go:94] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0904 11:30:37.148220   57293 kic_runner.go:115] Args: [docker exec --privileged minikube chown docker:docker /home/docker/.ssh/authorized_keys]
I0904 11:30:37.229390   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
I0904 11:30:37.254725   57293 machine.go:88] provisioning docker machine ...
I0904 11:30:37.254741   57293 ubuntu.go:169] provisioning hostname "minikube"
I0904 11:30:37.254773   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:37.282487   57293 main.go:130] libmachine: Using SSH client type: native
I0904 11:30:37.282605   57293 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0720] 0x7a3800 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0904 11:30:37.282611   57293 main.go:130] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0904 11:30:37.406666   57293 main.go:130] libmachine: SSH cmd err, output: <nil>: minikube

I0904 11:30:37.406722   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:37.438371   57293 main.go:130] libmachine: Using SSH client type: native
I0904 11:30:37.438471   57293 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0720] 0x7a3800 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0904 11:30:37.438480   57293 main.go:130] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0904 11:30:37.552081   57293 main.go:130] libmachine: SSH cmd err, output: <nil>: 
I0904 11:30:37.552109   57293 ubuntu.go:175] set auth options {CertDir:/home/marcos/.minikube CaCertPath:/home/marcos/.minikube/certs/ca.pem CaPrivateKeyPath:/home/marcos/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/home/marcos/.minikube/machines/server.pem ServerKeyPath:/home/marcos/.minikube/machines/server-key.pem ClientKeyPath:/home/marcos/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/home/marcos/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/home/marcos/.minikube}
I0904 11:30:37.552137   57293 ubuntu.go:177] setting up certificates
I0904 11:30:37.552150   57293 provision.go:83] configureAuth start
I0904 11:30:37.552253   57293 cli_runner.go:115] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0904 11:30:37.602827   57293 provision.go:138] copyHostCerts
I0904 11:30:37.602864   57293 exec_runner.go:145] found /home/marcos/.minikube/ca.pem, removing ...
I0904 11:30:37.602869   57293 exec_runner.go:208] rm: /home/marcos/.minikube/ca.pem
I0904 11:30:37.602898   57293 exec_runner.go:152] cp: /home/marcos/.minikube/certs/ca.pem --> /home/marcos/.minikube/ca.pem (1038 bytes)
I0904 11:30:37.602945   57293 exec_runner.go:145] found /home/marcos/.minikube/cert.pem, removing ...
I0904 11:30:37.602948   57293 exec_runner.go:208] rm: /home/marcos/.minikube/cert.pem
I0904 11:30:37.602961   57293 exec_runner.go:152] cp: /home/marcos/.minikube/certs/cert.pem --> /home/marcos/.minikube/cert.pem (1078 bytes)
I0904 11:30:37.602992   57293 exec_runner.go:145] found /home/marcos/.minikube/key.pem, removing ...
I0904 11:30:37.602995   57293 exec_runner.go:208] rm: /home/marcos/.minikube/key.pem
I0904 11:30:37.603007   57293 exec_runner.go:152] cp: /home/marcos/.minikube/certs/key.pem --> /home/marcos/.minikube/key.pem (1679 bytes)
I0904 11:30:37.603990   57293 provision.go:112] generating server cert: /home/marcos/.minikube/machines/server.pem ca-key=/home/marcos/.minikube/certs/ca.pem private-key=/home/marcos/.minikube/certs/ca-key.pem org=marcos.minikube san=[192.168.49.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I0904 11:30:37.677172   57293 provision.go:172] copyRemoteCerts
I0904 11:30:37.677278   57293 ssh_runner.go:152] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0904 11:30:37.677302   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:37.703458   57293 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/marcos/.minikube/machines/minikube/id_rsa Username:docker}
I0904 11:30:37.788059   57293 ssh_runner.go:319] scp /home/marcos/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1038 bytes)
I0904 11:30:37.804332   57293 ssh_runner.go:319] scp /home/marcos/.minikube/machines/server.pem --> /etc/docker/server.pem (1155 bytes)
I0904 11:30:37.818572   57293 ssh_runner.go:319] scp /home/marcos/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1675 bytes)
I0904 11:30:37.832254   57293 provision.go:86] duration metric: configureAuth took 280.096496ms
I0904 11:30:37.832265   57293 ubuntu.go:193] setting minikube options for container-runtime
I0904 11:30:37.832396   57293 config.go:177] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.18.2
I0904 11:30:37.832430   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:37.862551   57293 main.go:130] libmachine: Using SSH client type: native
I0904 11:30:37.862640   57293 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0720] 0x7a3800 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0904 11:30:37.862645   57293 main.go:130] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0904 11:30:37.998081   57293 main.go:130] libmachine: SSH cmd err, output: <nil>: overlay

I0904 11:30:37.998087   57293 ubuntu.go:71] root file system type: overlay
I0904 11:30:37.998206   57293 provision.go:309] Updating docker unit: /lib/systemd/system/docker.service ...
I0904 11:30:37.998240   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:38.026495   57293 main.go:130] libmachine: Using SSH client type: native
I0904 11:30:38.026583   57293 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0720] 0x7a3800 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0904 11:30:38.026627   57293 main.go:130] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0904 11:30:38.163057   57293 main.go:130] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0904 11:30:38.163172   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:38.212514   57293 main.go:130] libmachine: Using SSH client type: native
I0904 11:30:38.212603   57293 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0720] 0x7a3800 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0904 11:30:38.212613   57293 main.go:130] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0904 11:30:38.969591   57293 main.go:130] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2019-08-29 04:42:14.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2021-09-04 14:30:38.158615408 +0000
@@ -5,27 +5,28 @@
 After=network-online.target firewalld.service containerd.service
 Wants=network-online.target
 Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutSec=0
-RestartSec=2
-Restart=always
-
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
+Restart=on-failure
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
@@ -33,9 +34,10 @@
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes

I0904 11:30:38.969605   57293 machine.go:91] provisioned docker machine in 1.714874217s
I0904 11:30:38.969610   57293 client.go:171] LocalClient.Create took 18.510580828s
I0904 11:30:38.969619   57293 start.go:168] duration metric: libmachine.API.Create for "minikube" took 18.510678243s
I0904 11:30:38.969623   57293 start.go:267] post-start starting for "minikube" (driver="docker")
I0904 11:30:38.969625   57293 start.go:277] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0904 11:30:38.969659   57293 ssh_runner.go:152] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0904 11:30:38.969683   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:39.000110   57293 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/marcos/.minikube/machines/minikube/id_rsa Username:docker}
I0904 11:30:39.092889   57293 ssh_runner.go:152] Run: cat /etc/os-release
I0904 11:30:39.104932   57293 main.go:130] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0904 11:30:39.104996   57293 main.go:130] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0904 11:30:39.105030   57293 main.go:130] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0904 11:30:39.105046   57293 info.go:137] Remote host: Ubuntu 19.10
I0904 11:30:39.105064   57293 filesync.go:126] Scanning /home/marcos/.minikube/addons for local assets ...
I0904 11:30:39.105439   57293 filesync.go:126] Scanning /home/marcos/.minikube/files for local assets ...
I0904 11:30:39.105673   57293 start.go:270] post-start completed in 136.043404ms
I0904 11:30:39.106169   57293 cli_runner.go:115] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0904 11:30:39.142133   57293 profile.go:148] Saving config to /home/marcos/.minikube/profiles/minikube/config.json ...
I0904 11:30:39.142306   57293 ssh_runner.go:152] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0904 11:30:39.142329   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:39.168010   57293 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/marcos/.minikube/machines/minikube/id_rsa Username:docker}
I0904 11:30:39.249148   57293 out.go:177] 
W0904 11:30:39.249340   57293 out.go:242] üßØ  Docker is nearly out of disk space, which may cause deployments to fail! (96%!o(MISSING)f capacity)
W0904 11:30:39.249492   57293 out.go:242] üí°  Suggestion: 

    Try one or more of the following to free up space on the device:
    
    1. Run "docker system prune" to remove unused Docker data (optionally with "-a")
    2. Increase the storage allocated to Docker for Desktop by clicking on:
    Docker icon > Preferences > Resources > Disk Image Size
    3. Run "minikube ssh -- docker system prune" if using the Docker container runtime
W0904 11:30:39.249645   57293 out.go:242] üçø  Related issue: https://github.com/kubernetes/minikube/issues/9024
I0904 11:30:39.256608   57293 out.go:177] 
I0904 11:30:39.256663   57293 start.go:129] duration metric: createHost completed in 18.803756557s
I0904 11:30:39.256818   57293 cli_runner.go:115] Run: docker container inspect minikube --format={{.State.Status}}
W0904 11:30:39.314696   57293 fix.go:134] unexpected machine state, will restart: <nil>
I0904 11:30:39.314713   57293 machine.go:88] provisioning docker machine ...
I0904 11:30:39.314726   57293 ubuntu.go:169] provisioning hostname "minikube"
I0904 11:30:39.314758   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:39.341169   57293 main.go:130] libmachine: Using SSH client type: native
I0904 11:30:39.341263   57293 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0720] 0x7a3800 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0904 11:30:39.341269   57293 main.go:130] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0904 11:30:39.503176   57293 main.go:130] libmachine: SSH cmd err, output: <nil>: minikube

I0904 11:30:39.503288   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:39.537768   57293 main.go:130] libmachine: Using SSH client type: native
I0904 11:30:39.537858   57293 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0720] 0x7a3800 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0904 11:30:39.537868   57293 main.go:130] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0904 11:30:39.677281   57293 main.go:130] libmachine: SSH cmd err, output: <nil>: 
I0904 11:30:39.677349   57293 ubuntu.go:175] set auth options {CertDir:/home/marcos/.minikube CaCertPath:/home/marcos/.minikube/certs/ca.pem CaPrivateKeyPath:/home/marcos/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/home/marcos/.minikube/machines/server.pem ServerKeyPath:/home/marcos/.minikube/machines/server-key.pem ClientKeyPath:/home/marcos/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/home/marcos/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/home/marcos/.minikube}
I0904 11:30:39.677413   57293 ubuntu.go:177] setting up certificates
I0904 11:30:39.677430   57293 provision.go:83] configureAuth start
I0904 11:30:39.677564   57293 cli_runner.go:115] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0904 11:30:39.736121   57293 provision.go:138] copyHostCerts
I0904 11:30:39.736148   57293 exec_runner.go:145] found /home/marcos/.minikube/cert.pem, removing ...
I0904 11:30:39.736152   57293 exec_runner.go:208] rm: /home/marcos/.minikube/cert.pem
I0904 11:30:39.736192   57293 exec_runner.go:152] cp: /home/marcos/.minikube/certs/cert.pem --> /home/marcos/.minikube/cert.pem (1078 bytes)
I0904 11:30:39.736238   57293 exec_runner.go:145] found /home/marcos/.minikube/key.pem, removing ...
I0904 11:30:39.736240   57293 exec_runner.go:208] rm: /home/marcos/.minikube/key.pem
I0904 11:30:39.736256   57293 exec_runner.go:152] cp: /home/marcos/.minikube/certs/key.pem --> /home/marcos/.minikube/key.pem (1679 bytes)
I0904 11:30:39.736501   57293 exec_runner.go:145] found /home/marcos/.minikube/ca.pem, removing ...
I0904 11:30:39.736531   57293 exec_runner.go:208] rm: /home/marcos/.minikube/ca.pem
I0904 11:30:39.736556   57293 exec_runner.go:152] cp: /home/marcos/.minikube/certs/ca.pem --> /home/marcos/.minikube/ca.pem (1038 bytes)
I0904 11:30:39.736718   57293 provision.go:112] generating server cert: /home/marcos/.minikube/machines/server.pem ca-key=/home/marcos/.minikube/certs/ca.pem private-key=/home/marcos/.minikube/certs/ca-key.pem org=marcos.minikube san=[192.168.49.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I0904 11:30:39.827460   57293 provision.go:172] copyRemoteCerts
I0904 11:30:39.827487   57293 ssh_runner.go:152] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0904 11:30:39.827514   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:39.852028   57293 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/marcos/.minikube/machines/minikube/id_rsa Username:docker}
I0904 11:30:39.940995   57293 ssh_runner.go:319] scp /home/marcos/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1038 bytes)
I0904 11:30:39.982116   57293 ssh_runner.go:319] scp /home/marcos/.minikube/machines/server.pem --> /etc/docker/server.pem (1151 bytes)
I0904 11:30:40.013797   57293 ssh_runner.go:319] scp /home/marcos/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1679 bytes)
I0904 11:30:40.028228   57293 provision.go:86] duration metric: configureAuth took 350.789582ms
I0904 11:30:40.028237   57293 ubuntu.go:193] setting minikube options for container-runtime
I0904 11:30:40.028352   57293 config.go:177] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.18.2
I0904 11:30:40.028384   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:40.054168   57293 main.go:130] libmachine: Using SSH client type: native
I0904 11:30:40.054263   57293 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0720] 0x7a3800 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0904 11:30:40.054267   57293 main.go:130] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0904 11:30:40.193635   57293 main.go:130] libmachine: SSH cmd err, output: <nil>: overlay

I0904 11:30:40.193659   57293 ubuntu.go:71] root file system type: overlay
I0904 11:30:40.194040   57293 provision.go:309] Updating docker unit: /lib/systemd/system/docker.service ...
I0904 11:30:40.194158   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:40.243812   57293 main.go:130] libmachine: Using SSH client type: native
I0904 11:30:40.243922   57293 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0720] 0x7a3800 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0904 11:30:40.243973   57293 main.go:130] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0904 11:30:40.411628   57293 main.go:130] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0904 11:30:40.411716   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:40.445731   57293 main.go:130] libmachine: Using SSH client type: native
I0904 11:30:40.445825   57293 main.go:130] libmachine: &{{{<nil> 0 [] [] []} docker [0x7a0720] 0x7a3800 <nil>  [] 0s} 127.0.0.1 49157 <nil> <nil>}
I0904 11:30:40.445835   57293 main.go:130] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0904 11:30:40.597479   57293 main.go:130] libmachine: SSH cmd err, output: <nil>: 
I0904 11:30:40.597513   57293 machine.go:91] provisioned docker machine in 1.282786564s
I0904 11:30:40.597534   57293 start.go:267] post-start starting for "minikube" (driver="docker")
I0904 11:30:40.597552   57293 start.go:277] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0904 11:30:40.597672   57293 ssh_runner.go:152] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0904 11:30:40.597766   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:40.644860   57293 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/marcos/.minikube/machines/minikube/id_rsa Username:docker}
I0904 11:30:40.734881   57293 ssh_runner.go:152] Run: cat /etc/os-release
I0904 11:30:40.737681   57293 main.go:130] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0904 11:30:40.737694   57293 main.go:130] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0904 11:30:40.737703   57293 main.go:130] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0904 11:30:40.737707   57293 info.go:137] Remote host: Ubuntu 19.10
I0904 11:30:40.737715   57293 filesync.go:126] Scanning /home/marcos/.minikube/addons for local assets ...
I0904 11:30:40.737755   57293 filesync.go:126] Scanning /home/marcos/.minikube/files for local assets ...
I0904 11:30:40.737772   57293 start.go:270] post-start completed in 140.227982ms
I0904 11:30:40.737803   57293 ssh_runner.go:152] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0904 11:30:40.737835   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:40.778702   57293 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/marcos/.minikube/machines/minikube/id_rsa Username:docker}
I0904 11:30:40.869734   57293 out.go:177] 
W0904 11:30:40.869895   57293 out.go:242] üßØ  Docker is nearly out of disk space, which may cause deployments to fail! (96%!o(MISSING)f capacity)
W0904 11:30:40.870048   57293 out.go:242] üí°  Suggestion: 

    Try one or more of the following to free up space on the device:
    
    1. Run "docker system prune" to remove unused Docker data (optionally with "-a")
    2. Increase the storage allocated to Docker for Desktop by clicking on:
    Docker icon > Preferences > Resources > Disk Image Size
    3. Run "minikube ssh -- docker system prune" if using the Docker container runtime
W0904 11:30:40.870164   57293 out.go:242] üçø  Related issue: https://github.com/kubernetes/minikube/issues/9024
I0904 11:30:40.876942   57293 out.go:177] 
I0904 11:30:40.876960   57293 fix.go:57] fixHost completed within 37.741094297s
I0904 11:30:40.876966   57293 start.go:80] releasing machines lock for "minikube", held for 37.741112563s
I0904 11:30:40.877032   57293 cli_runner.go:115] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0904 11:30:40.912737   57293 ssh_runner.go:152] Run: systemctl --version
I0904 11:30:40.912767   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:40.912792   57293 ssh_runner.go:152] Run: curl -sS -m 2 https://k8s.gcr.io/
I0904 11:30:40.912827   57293 cli_runner.go:115] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0904 11:30:40.942954   57293 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/marcos/.minikube/machines/minikube/id_rsa Username:docker}
I0904 11:30:40.944601   57293 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:49157 SSHKeyPath:/home/marcos/.minikube/machines/minikube/id_rsa Username:docker}
I0904 11:30:42.143517   57293 ssh_runner.go:192] Completed: systemctl --version: (1.230764758s)
I0904 11:30:42.143531   57293 ssh_runner.go:192] Completed: curl -sS -m 2 https://k8s.gcr.io/: (1.230728477s)
I0904 11:30:42.143569   57293 ssh_runner.go:152] Run: sudo systemctl is-active --quiet service containerd
I0904 11:30:42.150825   57293 ssh_runner.go:152] Run: sudo systemctl cat docker.service
I0904 11:30:42.157031   57293 cruntime.go:255] skipping containerd shutdown because we are bound to it
I0904 11:30:42.157060   57293 ssh_runner.go:152] Run: sudo systemctl is-active --quiet service crio
I0904 11:30:42.164337   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///var/run/dockershim.sock
image-endpoint: unix:///var/run/dockershim.sock
" | sudo tee /etc/crictl.yaml"
I0904 11:30:42.172192   57293 ssh_runner.go:152] Run: sudo systemctl unmask docker.service
I0904 11:30:42.249061   57293 ssh_runner.go:152] Run: sudo systemctl enable docker.socket
I0904 11:30:42.295715   57293 ssh_runner.go:152] Run: sudo systemctl cat docker.service
I0904 11:30:42.301673   57293 ssh_runner.go:152] Run: sudo systemctl daemon-reload
I0904 11:30:42.347152   57293 ssh_runner.go:152] Run: sudo systemctl start docker
I0904 11:30:42.353131   57293 ssh_runner.go:152] Run: docker version --format {{.Server.Version}}
I0904 11:30:42.399108   57293 ssh_runner.go:152] Run: docker version --format {{.Server.Version}}
I0904 11:30:42.432006   57293 out.go:204] üê≥  Preparing Kubernetes v1.18.2 on Docker 19.03.2 ...
I0904 11:30:42.432056   57293 cli_runner.go:115] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0904 11:30:42.457115   57293 ssh_runner.go:152] Run: grep 192.168.49.1	host.minikube.internal$ /etc/hosts
I0904 11:30:42.459263   57293 ssh_runner.go:152] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.49.1	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0904 11:30:42.466370   57293 preload.go:131] Checking if preload exists for k8s version v1.18.2 and runtime docker
I0904 11:30:42.466393   57293 ssh_runner.go:152] Run: docker images --format {{.Repository}}:{{.Tag}}
I0904 11:30:42.496566   57293 docker.go:558] Got preloaded images: -- stdout --
marcosxaxa/todoapp:0.1
marcosxaxa/todoapp:<none>
marcosxaxa/todoapp:<none>
marcosxaxa/todoapp:<none>
marcosxaxa/todoapp:<none>
marcosxaxa/todoapp:<none>
marcosxaxa/todoapp:<none>
marcosxaxa/todoapp:<none>
marcosxaxa/todoapp:<none>
marcosxaxa/todoapp:<none>
kubernetesui/dashboard:v2.0.0
k8s.gcr.io/kube-proxy:v1.18.2
k8s.gcr.io/kube-apiserver:v1.18.2
k8s.gcr.io/kube-controller-manager:v1.18.2
k8s.gcr.io/kube-scheduler:v1.18.2
k8s.gcr.io/pause:3.2
k8s.gcr.io/coredns:1.6.7
k8s.gcr.io/etcd:3.4.3-0
kubernetesui/metrics-scraper:v1.0.2
marcosxaxa/centos_ssh:latest
marcosxaxa/ubuntu_ssh:latest
postgres:10.4
gcr.io/k8s-minikube/storage-provisioner:v1.8.1

-- /stdout --
I0904 11:30:42.496572   57293 docker.go:564] gcr.io/k8s-minikube/storage-provisioner:v5 wasn't preloaded
I0904 11:30:42.496576   57293 cache_images.go:82] LoadImages start: [k8s.gcr.io/kube-apiserver:v1.18.2 k8s.gcr.io/kube-controller-manager:v1.18.2 k8s.gcr.io/kube-scheduler:v1.18.2 k8s.gcr.io/kube-proxy:v1.18.2 k8s.gcr.io/pause:3.2 k8s.gcr.io/etcd:3.4.3-0 k8s.gcr.io/coredns:1.6.7 gcr.io/k8s-minikube/storage-provisioner:v5 docker.io/kubernetesui/dashboard:v2.1.0 docker.io/kubernetesui/metrics-scraper:v1.0.4]
I0904 11:30:42.497489   57293 image.go:135] retrieving image: docker.io/kubernetesui/dashboard:v2.1.0
I0904 11:30:42.497489   57293 image.go:135] retrieving image: docker.io/kubernetesui/metrics-scraper:v1.0.4
I0904 11:30:42.497489   57293 image.go:135] retrieving image: k8s.gcr.io/kube-controller-manager:v1.18.2
I0904 11:30:42.497530   57293 image.go:135] retrieving image: k8s.gcr.io/etcd:3.4.3-0
I0904 11:30:42.497539   57293 image.go:135] retrieving image: k8s.gcr.io/kube-proxy:v1.18.2
I0904 11:30:42.497548   57293 image.go:135] retrieving image: gcr.io/k8s-minikube/storage-provisioner:v5
I0904 11:30:42.497604   57293 image.go:135] retrieving image: k8s.gcr.io/kube-apiserver:v1.18.2
I0904 11:30:42.497616   57293 image.go:135] retrieving image: k8s.gcr.io/pause:3.2
I0904 11:30:42.497618   57293 image.go:135] retrieving image: k8s.gcr.io/kube-scheduler:v1.18.2
I0904 11:30:42.497667   57293 image.go:135] retrieving image: k8s.gcr.io/coredns:1.6.7
I0904 11:30:42.498144   57293 image.go:177] daemon lookup for k8s.gcr.io/kube-scheduler:v1.18.2: Error response from daemon: reference does not exist
I0904 11:30:42.498144   57293 image.go:177] daemon lookup for k8s.gcr.io/kube-controller-manager:v1.18.2: Error response from daemon: reference does not exist
I0904 11:30:42.498149   57293 image.go:177] daemon lookup for k8s.gcr.io/etcd:3.4.3-0: Error response from daemon: reference does not exist
I0904 11:30:42.498154   57293 image.go:177] daemon lookup for k8s.gcr.io/pause:3.2: Error response from daemon: reference does not exist
I0904 11:30:42.498169   57293 image.go:177] daemon lookup for docker.io/kubernetesui/dashboard:v2.1.0: Error response from daemon: reference does not exist
I0904 11:30:42.498173   57293 image.go:177] daemon lookup for gcr.io/k8s-minikube/storage-provisioner:v5: Error response from daemon: reference does not exist
I0904 11:30:42.498478   57293 image.go:177] daemon lookup for k8s.gcr.io/kube-apiserver:v1.18.2: Error response from daemon: reference does not exist
I0904 11:30:42.501502   57293 image.go:177] daemon lookup for k8s.gcr.io/kube-proxy:v1.18.2: Error response from daemon: reference does not exist
I0904 11:30:42.501502   57293 image.go:177] daemon lookup for k8s.gcr.io/coredns:1.6.7: Error response from daemon: reference does not exist
I0904 11:30:42.501551   57293 image.go:177] daemon lookup for docker.io/kubernetesui/metrics-scraper:v1.0.4: Error response from daemon: reference does not exist
I0904 11:30:43.827089   57293 ssh_runner.go:152] Run: docker image inspect --format {{.Id}} gcr.io/k8s-minikube/storage-provisioner:v5
I0904 11:30:43.863393   57293 cache_images.go:110] "gcr.io/k8s-minikube/storage-provisioner:v5" needs transfer: "gcr.io/k8s-minikube/storage-provisioner:v5" does not exist at hash "6e38f40d628db3002f5617342c8872c935de530d867d0f709a2fbda1a302a562" in container runtime
I0904 11:30:43.863409   57293 docker.go:239] Removing image: gcr.io/k8s-minikube/storage-provisioner:v5
I0904 11:30:43.863434   57293 ssh_runner.go:152] Run: docker rmi gcr.io/k8s-minikube/storage-provisioner:v5
I0904 11:30:43.889357   57293 cache_images.go:280] Loading image from: /home/marcos/.minikube/cache/images/gcr.io/k8s-minikube/storage-provisioner_v5
I0904 11:30:43.889414   57293 ssh_runner.go:152] Run: stat -c "%!s(MISSING) %!y(MISSING)" /var/lib/minikube/images/storage-provisioner_v5
I0904 11:30:43.891593   57293 ssh_runner.go:309] existence check for /var/lib/minikube/images/storage-provisioner_v5: stat -c "%!s(MISSING) %!y(MISSING)" /var/lib/minikube/images/storage-provisioner_v5: Process exited with status 1
stdout:

stderr:
stat: cannot stat '/var/lib/minikube/images/storage-provisioner_v5': No such file or directory
I0904 11:30:43.891602   57293 ssh_runner.go:319] scp /home/marcos/.minikube/cache/images/gcr.io/k8s-minikube/storage-provisioner_v5 --> /var/lib/minikube/images/storage-provisioner_v5 (9060352 bytes)
I0904 11:30:43.928913   57293 docker.go:206] Loading image: /var/lib/minikube/images/storage-provisioner_v5
I0904 11:30:43.928926   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo cat /var/lib/minikube/images/storage-provisioner_v5 | docker load"
I0904 11:30:44.353304   57293 cache_images.go:309] Transferred and loaded /home/marcos/.minikube/cache/images/gcr.io/k8s-minikube/storage-provisioner_v5 from cache
I0904 11:30:44.869172   57293 ssh_runner.go:152] Run: docker image inspect --format {{.Id}} docker.io/kubernetesui/metrics-scraper:v1.0.4
I0904 11:30:44.880255   57293 ssh_runner.go:152] Run: docker image inspect --format {{.Id}} docker.io/kubernetesui/dashboard:v2.1.0
I0904 11:30:44.925450   57293 cache_images.go:110] "docker.io/kubernetesui/metrics-scraper:v1.0.4" needs transfer: "docker.io/kubernetesui/metrics-scraper:v1.0.4" does not exist at hash "86262685d9abb35698a4e03ed13f9ded5b97c6c85b466285e4f367e5232eeee4" in container runtime
I0904 11:30:44.925466   57293 docker.go:239] Removing image: docker.io/kubernetesui/metrics-scraper:v1.0.4
I0904 11:30:44.925491   57293 ssh_runner.go:152] Run: docker rmi docker.io/kubernetesui/metrics-scraper:v1.0.4
I0904 11:30:44.928662   57293 cache_images.go:110] "docker.io/kubernetesui/dashboard:v2.1.0" needs transfer: "docker.io/kubernetesui/dashboard:v2.1.0" does not exist at hash "9a07b5b4bfac07e5cfc27f76c34516a3ad2fdfa3f683f375141fe662ef2e72db" in container runtime
I0904 11:30:44.928684   57293 docker.go:239] Removing image: docker.io/kubernetesui/dashboard:v2.1.0
I0904 11:30:44.928719   57293 ssh_runner.go:152] Run: docker rmi docker.io/kubernetesui/dashboard:v2.1.0
I0904 11:30:44.953764   57293 cache_images.go:280] Loading image from: /home/marcos/.minikube/cache/images/docker.io/kubernetesui/metrics-scraper_v1.0.4
I0904 11:30:44.953809   57293 ssh_runner.go:152] Run: stat -c "%!s(MISSING) %!y(MISSING)" /var/lib/minikube/images/metrics-scraper_v1.0.4
I0904 11:30:44.956253   57293 ssh_runner.go:309] existence check for /var/lib/minikube/images/metrics-scraper_v1.0.4: stat -c "%!s(MISSING) %!y(MISSING)" /var/lib/minikube/images/metrics-scraper_v1.0.4: Process exited with status 1
stdout:

stderr:
stat: cannot stat '/var/lib/minikube/images/metrics-scraper_v1.0.4': No such file or directory
I0904 11:30:44.956266   57293 ssh_runner.go:319] scp /home/marcos/.minikube/cache/images/docker.io/kubernetesui/metrics-scraper_v1.0.4 --> /var/lib/minikube/images/metrics-scraper_v1.0.4 (16022528 bytes)
I0904 11:30:44.956285   57293 cache_images.go:280] Loading image from: /home/marcos/.minikube/cache/images/docker.io/kubernetesui/dashboard_v2.1.0
I0904 11:30:44.956323   57293 ssh_runner.go:152] Run: stat -c "%!s(MISSING) %!y(MISSING)" /var/lib/minikube/images/dashboard_v2.1.0
I0904 11:30:44.960388   57293 ssh_runner.go:309] existence check for /var/lib/minikube/images/dashboard_v2.1.0: stat -c "%!s(MISSING) %!y(MISSING)" /var/lib/minikube/images/dashboard_v2.1.0: Process exited with status 1
stdout:

stderr:
stat: cannot stat '/var/lib/minikube/images/dashboard_v2.1.0': No such file or directory
I0904 11:30:44.960401   57293 ssh_runner.go:319] scp /home/marcos/.minikube/cache/images/docker.io/kubernetesui/dashboard_v2.1.0 --> /var/lib/minikube/images/dashboard_v2.1.0 (67993600 bytes)
I0904 11:30:45.031211   57293 docker.go:206] Loading image: /var/lib/minikube/images/metrics-scraper_v1.0.4
I0904 11:30:45.031224   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo cat /var/lib/minikube/images/metrics-scraper_v1.0.4 | docker load"
I0904 11:30:45.697419   57293 cache_images.go:309] Transferred and loaded /home/marcos/.minikube/cache/images/docker.io/kubernetesui/metrics-scraper_v1.0.4 from cache
I0904 11:30:45.697485   57293 docker.go:206] Loading image: /var/lib/minikube/images/dashboard_v2.1.0
I0904 11:30:45.697510   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo cat /var/lib/minikube/images/dashboard_v2.1.0 | docker load"
I0904 11:30:45.828018   57293 ssh_runner.go:152] Run: docker image inspect --format {{.Id}} k8s.gcr.io/coredns:1.6.7
I0904 11:30:46.171528   57293 ssh_runner.go:152] Run: docker image inspect --format {{.Id}} k8s.gcr.io/kube-scheduler:v1.18.2
I0904 11:30:46.249177   57293 ssh_runner.go:152] Run: docker image inspect --format {{.Id}} k8s.gcr.io/kube-apiserver:v1.18.2
I0904 11:30:46.330786   57293 ssh_runner.go:152] Run: docker image inspect --format {{.Id}} k8s.gcr.io/kube-controller-manager:v1.18.2
I0904 11:30:46.376592   57293 ssh_runner.go:152] Run: docker image inspect --format {{.Id}} k8s.gcr.io/etcd:3.4.3-0
I0904 11:30:46.480310   57293 ssh_runner.go:152] Run: docker image inspect --format {{.Id}} k8s.gcr.io/kube-proxy:v1.18.2
I0904 11:30:46.500819   57293 ssh_runner.go:152] Run: docker image inspect --format {{.Id}} k8s.gcr.io/pause:3.2
I0904 11:30:48.161062   57293 ssh_runner.go:192] Completed: /bin/bash -c "sudo cat /var/lib/minikube/images/dashboard_v2.1.0 | docker load": (2.463540677s)
I0904 11:30:48.161071   57293 cache_images.go:309] Transferred and loaded /home/marcos/.minikube/cache/images/docker.io/kubernetesui/dashboard_v2.1.0 from cache
I0904 11:30:48.161104   57293 ssh_runner.go:192] Completed: docker image inspect --format {{.Id}} k8s.gcr.io/coredns:1.6.7: (2.333078952s)
I0904 11:30:48.161141   57293 ssh_runner.go:192] Completed: docker image inspect --format {{.Id}} k8s.gcr.io/kube-scheduler:v1.18.2: (1.989604256s)
I0904 11:30:48.161167   57293 ssh_runner.go:192] Completed: docker image inspect --format {{.Id}} k8s.gcr.io/kube-apiserver:v1.18.2: (1.9119825s)
I0904 11:30:48.161189   57293 ssh_runner.go:192] Completed: docker image inspect --format {{.Id}} k8s.gcr.io/kube-controller-manager:v1.18.2: (1.830397066s)
I0904 11:30:48.161213   57293 ssh_runner.go:192] Completed: docker image inspect --format {{.Id}} k8s.gcr.io/etcd:3.4.3-0: (1.784612772s)
I0904 11:30:48.161227   57293 ssh_runner.go:192] Completed: docker image inspect --format {{.Id}} k8s.gcr.io/kube-proxy:v1.18.2: (1.680910861s)
I0904 11:30:48.161249   57293 ssh_runner.go:192] Completed: docker image inspect --format {{.Id}} k8s.gcr.io/pause:3.2: (1.660423869s)
I0904 11:30:48.161257   57293 cache_images.go:117] Successfully loaded all cached images
I0904 11:30:48.161259   57293 cache_images.go:86] LoadImages completed in 5.664677615s
I0904 11:30:48.161289   57293 ssh_runner.go:152] Run: docker info --format {{.CgroupDriver}}
I0904 11:30:48.216411   57293 cni.go:93] Creating CNI manager for ""
I0904 11:30:48.216417   57293 cni.go:167] CNI unnecessary in this configuration, recommending no CNI
I0904 11:30:48.216421   57293 kubeadm.go:87] Using pod CIDR: 10.244.0.0/16
I0904 11:30:48.216428   57293 kubeadm.go:153] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.49.2 APIServerPort:8443 KubernetesVersion:v1.18.2 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:minikube NodeName:minikube DNSDomain:cluster.local CRISocket:/var/run/dockershim.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.49.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NoTaintMaster:true NodeIP:192.168.49.2 CgroupDriver:cgroupfs ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[]}
I0904 11:30:48.216611   57293 kubeadm.go:157] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.49.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: /var/run/dockershim.sock
  name: "minikube"
  kubeletExtraArgs:
    node-ip: 192.168.49.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.49.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.18.2
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: cgroupfs
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%!"(MISSING)
  nodefs.inodesFree: "0%!"(MISSING)
  imagefs.available: "0%!"(MISSING)
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249
conntrack:
  maxPerCore: 0
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
  tcpEstablishedTimeout: 0s
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
  tcpCloseWaitTimeout: 0s

I0904 11:30:48.216675   57293 kubeadm.go:909] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.18.2/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --container-runtime=docker --hostname-override=minikube --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.49.2

[Install]
 config:
{KubernetesVersion:v1.18.2 ClusterName:minikube Namespace: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin: FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: ExtraOptions:[{Component:kubeadm Key:pod-network-cidr Value:10.244.0.0/16}] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:}
I0904 11:30:48.216727   57293 ssh_runner.go:152] Run: sudo ls /var/lib/minikube/binaries/v1.18.2
I0904 11:30:48.221219   57293 binaries.go:44] Found k8s binaries, skipping transfer
I0904 11:30:48.221250   57293 ssh_runner.go:152] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I0904 11:30:48.225345   57293 ssh_runner.go:319] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (334 bytes)
I0904 11:30:48.233755   57293 ssh_runner.go:319] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0904 11:30:48.241397   57293 ssh_runner.go:319] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (2051 bytes)
I0904 11:30:48.249572   57293 ssh_runner.go:152] Run: grep 192.168.49.2	control-plane.minikube.internal$ /etc/hosts
I0904 11:30:48.251384   57293 ssh_runner.go:152] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.49.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0904 11:30:48.256772   57293 certs.go:52] Setting up /home/marcos/.minikube/profiles/minikube for IP: 192.168.49.2
I0904 11:30:48.256801   57293 certs.go:179] skipping minikubeCA CA generation: /home/marcos/.minikube/ca.key
I0904 11:30:48.256818   57293 certs.go:179] skipping proxyClientCA CA generation: /home/marcos/.minikube/proxy-client-ca.key
I0904 11:30:48.256847   57293 certs.go:293] skipping minikube-user signed cert generation: /home/marcos/.minikube/profiles/minikube/client.key
I0904 11:30:48.256855   57293 certs.go:297] generating minikube signed cert: /home/marcos/.minikube/profiles/minikube/apiserver.key.dd3b5fb2
I0904 11:30:48.256858   57293 crypto.go:69] Generating cert /home/marcos/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 with IP's: [192.168.49.2 10.96.0.1 127.0.0.1 10.0.0.1]
I0904 11:30:48.328021   57293 crypto.go:157] Writing cert to /home/marcos/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 ...
I0904 11:30:48.328030   57293 lock.go:36] WriteFile acquiring /home/marcos/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2: {Name:mk945ae9e57e74e69c9e94905a6afdbbe401e555 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0904 11:30:48.328150   57293 crypto.go:165] Writing key to /home/marcos/.minikube/profiles/minikube/apiserver.key.dd3b5fb2 ...
I0904 11:30:48.328154   57293 lock.go:36] WriteFile acquiring /home/marcos/.minikube/profiles/minikube/apiserver.key.dd3b5fb2: {Name:mkbb55df071d71c6ecf9a1d6251f2952727c67be Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0904 11:30:48.328207   57293 certs.go:308] copying /home/marcos/.minikube/profiles/minikube/apiserver.crt.dd3b5fb2 -> /home/marcos/.minikube/profiles/minikube/apiserver.crt
I0904 11:30:48.328286   57293 certs.go:312] copying /home/marcos/.minikube/profiles/minikube/apiserver.key.dd3b5fb2 -> /home/marcos/.minikube/profiles/minikube/apiserver.key
I0904 11:30:48.328340   57293 certs.go:293] skipping aggregator signed cert generation: /home/marcos/.minikube/profiles/minikube/proxy-client.key
I0904 11:30:48.328398   57293 certs.go:376] found cert: /home/marcos/.minikube/certs/home/marcos/.minikube/certs/ca-key.pem (1675 bytes)
I0904 11:30:48.328415   57293 certs.go:376] found cert: /home/marcos/.minikube/certs/home/marcos/.minikube/certs/ca.pem (1038 bytes)
I0904 11:30:48.328428   57293 certs.go:376] found cert: /home/marcos/.minikube/certs/home/marcos/.minikube/certs/cert.pem (1078 bytes)
I0904 11:30:48.328441   57293 certs.go:376] found cert: /home/marcos/.minikube/certs/home/marcos/.minikube/certs/key.pem (1679 bytes)
I0904 11:30:48.329010   57293 ssh_runner.go:319] scp /home/marcos/.minikube/profiles/minikube/apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1350 bytes)
I0904 11:30:48.341223   57293 ssh_runner.go:319] scp /home/marcos/.minikube/profiles/minikube/apiserver.key --> /var/lib/minikube/certs/apiserver.key (1675 bytes)
I0904 11:30:48.351570   57293 ssh_runner.go:319] scp /home/marcos/.minikube/profiles/minikube/proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1103 bytes)
I0904 11:30:48.361870   57293 ssh_runner.go:319] scp /home/marcos/.minikube/profiles/minikube/proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1675 bytes)
I0904 11:30:48.373221   57293 ssh_runner.go:319] scp /home/marcos/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1066 bytes)
I0904 11:30:48.383937   57293 ssh_runner.go:319] scp /home/marcos/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1675 bytes)
I0904 11:30:48.394947   57293 ssh_runner.go:319] scp /home/marcos/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1074 bytes)
I0904 11:30:48.405297   57293 ssh_runner.go:319] scp /home/marcos/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1679 bytes)
I0904 11:30:48.415891   57293 ssh_runner.go:319] scp /home/marcos/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1066 bytes)
I0904 11:30:48.426631   57293 ssh_runner.go:319] scp memory --> /var/lib/minikube/kubeconfig (738 bytes)
I0904 11:30:48.434825   57293 ssh_runner.go:152] Run: openssl version
I0904 11:30:48.437992   57293 ssh_runner.go:152] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0904 11:30:48.443037   57293 ssh_runner.go:152] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0904 11:30:48.444893   57293 certs.go:419] hashing: -rw-r--r-- 1 root root 1066 Jul 13  2019 /usr/share/ca-certificates/minikubeCA.pem
I0904 11:30:48.444921   57293 ssh_runner.go:152] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0904 11:30:48.447909   57293 ssh_runner.go:152] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0904 11:30:48.452429   57293 kubeadm.go:390] StartCluster: {Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.10@sha256:f58e0c4662bac8a9b5dda7984b185bad8502ade5d9fa364bf2755d636ab51438 Memory:3900 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.99.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser: SSHKey: SSHPort:0 KubernetesConfig:{KubernetesVersion:v1.18.2 ClusterName:minikube Namespace: APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin: FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: ExtraOptions:[{Component:kubeadm Key:pod-network-cidr Value:10.244.0.0/16}] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.49.2 Port:8443 KubernetesVersion:v1.18.2 ControlPlane:true Worker:true}] Addons:map[dashboard:true default-storageclass:true efk:false freshpod:false gvisor:false helm-tiller:false ingress:false ingress-dns:false istio:false istio-provisioner:false logviewer:false metallb:false metrics-server:false nvidia-driver-installer:false nvidia-gpu-device-plugin:false registry:false registry-aliases:false registry-creds:false storage-provisioner:true storage-provisioner-gluster:false] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: MultiNodeRequested:false ExtraDisks:0}
I0904 11:30:48.452502   57293 ssh_runner.go:152] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0904 11:30:48.478467   57293 ssh_runner.go:152] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I0904 11:30:48.482750   57293 kubeadm.go:401] found existing configuration files, will attempt cluster restart
I0904 11:30:48.482757   57293 kubeadm.go:600] restartCluster start
I0904 11:30:48.482780   57293 ssh_runner.go:152] Run: sudo test -d /data/minikube
I0904 11:30:48.486906   57293 kubeadm.go:126] /data/minikube skipping compat symlinks: sudo test -d /data/minikube: Process exited with status 1
stdout:

stderr:
I0904 11:30:48.487445   57293 kubeconfig.go:117] verify returned: extract IP: "minikube" does not appear in /home/marcos/.kube/config
I0904 11:30:48.487651   57293 kubeconfig.go:128] "minikube" context is missing from /home/marcos/.kube/config - will repair!
I0904 11:30:48.488068   57293 lock.go:36] WriteFile acquiring /home/marcos/.kube/config: {Name:mk2991aa53a5e07ceea2715fcbf9434a43f1e6da Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0904 11:30:48.489785   57293 ssh_runner.go:152] Run: sudo diff -u /var/tmp/minikube/kubeadm.yaml /var/tmp/minikube/kubeadm.yaml.new
I0904 11:30:48.494780   57293 kubeadm.go:568] needs reconfigure: configs differ:
-- stdout --
--- /var/tmp/minikube/kubeadm.yaml	2020-08-16 10:24:44.270703809 +0000
+++ /var/tmp/minikube/kubeadm.yaml.new	2021-09-04 14:30:48.246777276 +0000
@@ -1,7 +1,7 @@
 apiVersion: kubeadm.k8s.io/v1beta2
 kind: InitConfiguration
 localAPIEndpoint:
-  advertiseAddress: 172.17.0.3
+  advertiseAddress: 192.168.49.2
   bindPort: 8443
 bootstrapTokens:
   - groups:
@@ -14,15 +14,22 @@
   criSocket: /var/run/dockershim.sock
   name: "minikube"
   kubeletExtraArgs:
-    node-ip: 172.17.0.3
+    node-ip: 192.168.49.2
   taints: []
 ---
 apiVersion: kubeadm.k8s.io/v1beta2
 kind: ClusterConfiguration
 apiServer:
-  certSANs: ["127.0.0.1", "localhost", "172.17.0.3"]
+  certSANs: ["127.0.0.1", "localhost", "192.168.49.2"]
   extraArgs:
     enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
+controllerManager:
+  extraArgs:
+    allocate-node-cidrs: "true"
+    leader-elect: "false"
+scheduler:
+  extraArgs:
+    leader-elect: "false"
 certificatesDir: /var/lib/minikube/certs
 clusterName: mk
 controlPlaneEndpoint: control-plane.minikube.internal:8443
@@ -31,6 +38,8 @@
 etcd:
   local:
     dataDir: /var/lib/minikube/etcd
+    extraArgs:
+      proxy-refresh-interval: "70000"
 kubernetesVersion: v1.18.2
 networking:
   dnsDomain: cluster.local
@@ -39,14 +48,27 @@
 ---
 apiVersion: kubelet.config.k8s.io/v1beta1
 kind: KubeletConfiguration
+authentication:
+  x509:
+    clientCAFile: /var/lib/minikube/certs/ca.crt
+cgroupDriver: cgroupfs
+clusterDomain: "cluster.local"
 # disable disk resource management by default
 imageGCHighThresholdPercent: 100
 evictionHard:
   nodefs.available: "0%!"(MISSING)
   nodefs.inodesFree: "0%!"(MISSING)
   imagefs.available: "0%!"(MISSING)
+failSwapOn: false
+staticPodPath: /etc/kubernetes/manifests
 ---
 apiVersion: kubeproxy.config.k8s.io/v1alpha1
 kind: KubeProxyConfiguration
 clusterCIDR: "10.244.0.0/16"
-metricsBindAddress: 172.17.0.3:10249
+metricsBindAddress: 0.0.0.0:10249
+conntrack:
+  maxPerCore: 0
+# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
+  tcpEstablishedTimeout: 0s
+# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
+  tcpCloseWaitTimeout: 0s

-- /stdout --
I0904 11:30:48.498020   57293 kubeadm.go:1032] stopping kube-system containers ...
I0904 11:30:48.498052   57293 ssh_runner.go:152] Run: docker ps -a --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0904 11:30:48.523798   57293 ssh_runner.go:152] Run: sudo systemctl stop kubelet
I0904 11:30:48.530813   57293 ssh_runner.go:152] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0904 11:30:48.534883   57293 kubeadm.go:151] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0904 11:30:48.534911   57293 ssh_runner.go:152] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0904 11:30:48.539240   57293 kubeadm.go:676] reconfiguring cluster from /var/tmp/minikube/kubeadm.yaml
I0904 11:30:48.539248   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm init phase certs all --config /var/tmp/minikube/kubeadm.yaml"
E0904 11:30:49.138463   57293 kubeadm.go:680] sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm init phase certs all --config /var/tmp/minikube/kubeadm.yaml failed - will try once more: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm init phase certs all --config /var/tmp/minikube/kubeadm.yaml": Process exited with status 1
stdout:
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0904 14:30:48.905850    1207 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
error execution phase certs/apiserver-kubelet-client: failed to write or validate certificate "apiserver-kubelet-client": failure loading apiserver-kubelet-client certificate: failed to load certificate: the certificate has expired
To see the stack trace of this error execute with --v=5 or higher
I0904 11:30:49.138513   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm init phase certs all --config /var/tmp/minikube/kubeadm.yaml"
I0904 11:30:49.235547   57293 kubeadm.go:604] restartCluster took 752.786169ms
W0904 11:30:49.235619   57293 out.go:242] ü§¶  Unable to restart cluster, will reset it: run: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm init phase certs all --config /var/tmp/minikube/kubeadm.yaml": Process exited with status 1
stdout:
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0904 14:30:49.173031    1219 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
error execution phase certs/apiserver-kubelet-client: failed to write or validate certificate "apiserver-kubelet-client": failure loading apiserver-kubelet-client certificate: failed to load certificate: the certificate has expired
To see the stack trace of this error execute with --v=5 or higher

I0904 11:30:49.235678   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm reset --cri-socket /var/run/dockershim.sock --force"
I0904 11:30:49.320861   57293 ssh_runner.go:152] Run: sudo systemctl stop -f kubelet
I0904 11:30:49.328010   57293 ssh_runner.go:152] Run: docker ps -a --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0904 11:30:49.354841   57293 ssh_runner.go:152] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0904 11:30:49.359049   57293 kubeadm.go:220] ignoring SystemVerification for kubeadm because of docker driver
I0904 11:30:49.359081   57293 ssh_runner.go:152] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0904 11:30:49.362903   57293 kubeadm.go:151] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0904 11:30:49.362917   57293 ssh_runner.go:243] Start: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0904 11:30:50.343676   57293 out.go:204]     ‚ñ™ Generating certificates and keys ...
W0904 11:30:50.474991   57293 out.go:242] üí¢  initialization failed, will try again: wait: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 1
stdout:
[init] Using Kubernetes version: v1.18.2
[preflight] Running pre-flight checks
[preflight] The system verification failed. Printing the output from the verification:
[0;37mKERNEL_VERSION[0m: [0;32m5.4.0-81-generic[0m
[0;37mDOCKER_VERSION[0m: [0;32m19.03.2[0m
[0;37mDOCKER_GRAPH_DRIVER[0m: [0;32moverlay2[0m
[0;37mOS[0m: [0;32mLinux[0m
[0;37mCGROUPS_CPU[0m: [0;32menabled[0m
[0;37mCGROUPS_CPUACCT[0m: [0;32menabled[0m
[0;37mCGROUPS_CPUSET[0m: [0;32menabled[0m
[0;37mCGROUPS_DEVICES[0m: [0;32menabled[0m
[0;37mCGROUPS_FREEZER[0m: [0;32menabled[0m
[0;37mCGROUPS_MEMORY[0m: [0;32menabled[0m
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0904 14:30:49.390525    1276 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
	[WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/
	[WARNING Swap]: running with swap on is not supported. Please disable swap
	[WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module: "configs", output: "modprobe: FATAL: Module configs not found in directory /lib/modules/5.4.0-81-generic\n", err: exit status 1
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
error execution phase certs/apiserver-kubelet-client: failed to write or validate certificate "apiserver-kubelet-client": failure loading apiserver-kubelet-client certificate: failed to load certificate: the certificate has expired
To see the stack trace of this error execute with --v=5 or higher

I0904 11:30:50.475089   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm reset --cri-socket /var/run/dockershim.sock --force"
I0904 11:30:50.535045   57293 ssh_runner.go:152] Run: sudo systemctl stop -f kubelet
I0904 11:30:50.541597   57293 ssh_runner.go:152] Run: docker ps -a --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0904 11:30:50.573790   57293 kubeadm.go:220] ignoring SystemVerification for kubeadm because of docker driver
I0904 11:30:50.573821   57293 ssh_runner.go:152] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0904 11:30:50.577983   57293 kubeadm.go:151] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0904 11:30:50.577997   57293 ssh_runner.go:243] Start: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0904 11:30:51.062943   57293 out.go:204]     ‚ñ™ Generating certificates and keys ...
I0904 11:30:51.321386   57293 kubeadm.go:392] StartCluster complete in 2.868960085s
I0904 11:30:51.321429   57293 ssh_runner.go:152] Run: docker ps -a --filter=name=k8s_kube-apiserver --format={{.ID}}
I0904 11:30:51.347583   57293 logs.go:270] 0 containers: []
W0904 11:30:51.347603   57293 logs.go:272] No container was found matching "kube-apiserver"
I0904 11:30:51.347629   57293 ssh_runner.go:152] Run: docker ps -a --filter=name=k8s_etcd --format={{.ID}}
I0904 11:30:51.373831   57293 logs.go:270] 0 containers: []
W0904 11:30:51.373839   57293 logs.go:272] No container was found matching "etcd"
I0904 11:30:51.373886   57293 ssh_runner.go:152] Run: docker ps -a --filter=name=k8s_coredns --format={{.ID}}
I0904 11:30:51.403432   57293 logs.go:270] 0 containers: []
W0904 11:30:51.403439   57293 logs.go:272] No container was found matching "coredns"
I0904 11:30:51.403466   57293 ssh_runner.go:152] Run: docker ps -a --filter=name=k8s_kube-scheduler --format={{.ID}}
I0904 11:30:51.429662   57293 logs.go:270] 0 containers: []
W0904 11:30:51.429672   57293 logs.go:272] No container was found matching "kube-scheduler"
I0904 11:30:51.429701   57293 ssh_runner.go:152] Run: docker ps -a --filter=name=k8s_kube-proxy --format={{.ID}}
I0904 11:30:51.456678   57293 logs.go:270] 0 containers: []
W0904 11:30:51.456688   57293 logs.go:272] No container was found matching "kube-proxy"
I0904 11:30:51.456718   57293 ssh_runner.go:152] Run: docker ps -a --filter=name=k8s_kubernetes-dashboard --format={{.ID}}
I0904 11:30:51.483233   57293 logs.go:270] 0 containers: []
W0904 11:30:51.483242   57293 logs.go:272] No container was found matching "kubernetes-dashboard"
I0904 11:30:51.483286   57293 ssh_runner.go:152] Run: docker ps -a --filter=name=k8s_storage-provisioner --format={{.ID}}
I0904 11:30:51.509690   57293 logs.go:270] 0 containers: []
W0904 11:30:51.509699   57293 logs.go:272] No container was found matching "storage-provisioner"
I0904 11:30:51.509728   57293 ssh_runner.go:152] Run: docker ps -a --filter=name=k8s_kube-controller-manager --format={{.ID}}
I0904 11:30:51.535183   57293 logs.go:270] 0 containers: []
W0904 11:30:51.535201   57293 logs.go:272] No container was found matching "kube-controller-manager"
I0904 11:30:51.535210   57293 logs.go:123] Gathering logs for dmesg ...
I0904 11:30:51.535217   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo dmesg -PH -L=never --level warn,err,crit,alert,emerg | tail -n 400"
I0904 11:30:51.558949   57293 logs.go:123] Gathering logs for describe nodes ...
I0904 11:30:51.558959   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.18.2/kubectl describe nodes --kubeconfig=/var/lib/minikube/kubeconfig"
W0904 11:30:51.923930   57293 logs.go:130] failed describe nodes: command: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.18.2/kubectl describe nodes --kubeconfig=/var/lib/minikube/kubeconfig" /bin/bash -c "sudo /var/lib/minikube/binaries/v1.18.2/kubectl describe nodes --kubeconfig=/var/lib/minikube/kubeconfig": Process exited with status 1
stdout:

stderr:
The connection to the server localhost:8443 was refused - did you specify the right host or port?
 output: 
** stderr ** 
The connection to the server localhost:8443 was refused - did you specify the right host or port?

** /stderr **
I0904 11:30:51.923951   57293 logs.go:123] Gathering logs for Docker ...
I0904 11:30:51.923972   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo journalctl -u docker -n 400"
I0904 11:30:51.969381   57293 logs.go:123] Gathering logs for container status ...
I0904 11:30:51.969394   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo `which crictl || echo crictl` ps -a || sudo docker ps -a"
I0904 11:30:54.030140   57293 ssh_runner.go:192] Completed: /bin/bash -c "sudo `which crictl || echo crictl` ps -a || sudo docker ps -a": (2.060736276s)
I0904 11:30:54.030283   57293 logs.go:123] Gathering logs for kubelet ...
I0904 11:30:54.030288   57293 ssh_runner.go:152] Run: /bin/bash -c "sudo journalctl -u kubelet -n 400"
W0904 11:30:54.038694   57293 out.go:371] Error starting cluster: wait: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 1
stdout:
[init] Using Kubernetes version: v1.18.2
[preflight] Running pre-flight checks
[preflight] The system verification failed. Printing the output from the verification:
[0;37mKERNEL_VERSION[0m: [0;32m5.4.0-81-generic[0m
[0;37mDOCKER_VERSION[0m: [0;32m19.03.2[0m
[0;37mDOCKER_GRAPH_DRIVER[0m: [0;32moverlay2[0m
[0;37mOS[0m: [0;32mLinux[0m
[0;37mCGROUPS_CPU[0m: [0;32menabled[0m
[0;37mCGROUPS_CPUACCT[0m: [0;32menabled[0m
[0;37mCGROUPS_CPUSET[0m: [0;32menabled[0m
[0;37mCGROUPS_DEVICES[0m: [0;32menabled[0m
[0;37mCGROUPS_FREEZER[0m: [0;32menabled[0m
[0;37mCGROUPS_MEMORY[0m: [0;32menabled[0m
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0904 14:30:50.606690    1550 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
	[WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/
	[WARNING Swap]: running with swap on is not supported. Please disable swap
	[WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module: "configs", output: "modprobe: FATAL: Module configs not found in directory /lib/modules/5.4.0-81-generic\n", err: exit status 1
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
error execution phase certs/apiserver-kubelet-client: failed to write or validate certificate "apiserver-kubelet-client": failure loading apiserver-kubelet-client certificate: failed to load certificate: the certificate has expired
To see the stack trace of this error execute with --v=5 or higher
W0904 11:30:54.038708   57293 out.go:242] 
W0904 11:30:54.038817   57293 out.go:242] üí£  Error starting cluster: wait: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 1
stdout:
[init] Using Kubernetes version: v1.18.2
[preflight] Running pre-flight checks
[preflight] The system verification failed. Printing the output from the verification:
[0;37mKERNEL_VERSION[0m: [0;32m5.4.0-81-generic[0m
[0;37mDOCKER_VERSION[0m: [0;32m19.03.2[0m
[0;37mDOCKER_GRAPH_DRIVER[0m: [0;32moverlay2[0m
[0;37mOS[0m: [0;32mLinux[0m
[0;37mCGROUPS_CPU[0m: [0;32menabled[0m
[0;37mCGROUPS_CPUACCT[0m: [0;32menabled[0m
[0;37mCGROUPS_CPUSET[0m: [0;32menabled[0m
[0;37mCGROUPS_DEVICES[0m: [0;32menabled[0m
[0;37mCGROUPS_FREEZER[0m: [0;32menabled[0m
[0;37mCGROUPS_MEMORY[0m: [0;32menabled[0m
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0904 14:30:50.606690    1550 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
	[WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/
	[WARNING Swap]: running with swap on is not supported. Please disable swap
	[WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module: "configs", output: "modprobe: FATAL: Module configs not found in directory /lib/modules/5.4.0-81-generic\n", err: exit status 1
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
error execution phase certs/apiserver-kubelet-client: failed to write or validate certificate "apiserver-kubelet-client": failure loading apiserver-kubelet-client certificate: failed to load certificate: the certificate has expired
To see the stack trace of this error execute with --v=5 or higher

W0904 11:30:54.038853   57293 out.go:242] 
W0904 11:30:54.039398   57293 out.go:242] [31m‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ[0m
[31m‚îÇ[0m                                                                                           [31m‚îÇ[0m
[31m‚îÇ[0m    üòø  If the above advice does not help, please let us know:                             [31m‚îÇ[0m
[31m‚îÇ[0m    üëâ  https://github.com/kubernetes/minikube/issues/new/choose                           [31m‚îÇ[0m
[31m‚îÇ[0m                                                                                           [31m‚îÇ[0m
[31m‚îÇ[0m    Please run `minikube logs --file=logs.txt` and attach logs.txt to the GitHub issue.    [31m‚îÇ[0m
[31m‚îÇ[0m                                                                                           [31m‚îÇ[0m
[31m‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ[0m
I0904 11:30:54.045959   57293 out.go:177] 
W0904 11:30:54.046290   57293 out.go:242] ‚ùå  Exiting due to GUEST_START: wait: /bin/bash -c "sudo env PATH=/var/lib/minikube/binaries/v1.18.2:$PATH kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables": Process exited with status 1
stdout:
[init] Using Kubernetes version: v1.18.2
[preflight] Running pre-flight checks
[preflight] The system verification failed. Printing the output from the verification:
[0;37mKERNEL_VERSION[0m: [0;32m5.4.0-81-generic[0m
[0;37mDOCKER_VERSION[0m: [0;32m19.03.2[0m
[0;37mDOCKER_GRAPH_DRIVER[0m: [0;32moverlay2[0m
[0;37mOS[0m: [0;32mLinux[0m
[0;37mCGROUPS_CPU[0m: [0;32menabled[0m
[0;37mCGROUPS_CPUACCT[0m: [0;32menabled[0m
[0;37mCGROUPS_CPUSET[0m: [0;32menabled[0m
[0;37mCGROUPS_DEVICES[0m: [0;32menabled[0m
[0;37mCGROUPS_FREEZER[0m: [0;32menabled[0m
[0;37mCGROUPS_MEMORY[0m: [0;32menabled[0m
[preflight] Pulling images required for setting up a Kubernetes cluster
[preflight] This might take a minute or two, depending on the speed of your internet connection
[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
[kubelet-start] Starting the kubelet
[certs] Using certificateDir folder "/var/lib/minikube/certs"
[certs] Using existing ca certificate authority
[certs] Using existing apiserver certificate and key on disk

stderr:
W0904 14:30:50.606690    1550 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]
	[WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/
	[WARNING Swap]: running with swap on is not supported. Please disable swap
	[WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module: "configs", output: "modprobe: FATAL: Module configs not found in directory /lib/modules/5.4.0-81-generic\n", err: exit status 1
	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
	[WARNING DirAvailable--var-lib-minikube-etcd]: /var/lib/minikube/etcd is not empty
error execution phase certs/apiserver-kubelet-client: failed to write or validate certificate "apiserver-kubelet-client": failure loading apiserver-kubelet-client certificate: failed to load certificate: the certificate has expired
To see the stack trace of this error execute with --v=5 or higher

W0904 11:30:54.046433   57293 out.go:242] 
W0904 11:30:54.048780   57293 out.go:242] [31m‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ[0m
[31m‚îÇ[0m                                                                                           [31m‚îÇ[0m
[31m‚îÇ[0m    üòø  If the above advice does not help, please let us know:                             [31m‚îÇ[0m
[31m‚îÇ[0m    üëâ  https://github.com/kubernetes/minikube/issues/new/choose                           [31m‚îÇ[0m
[31m‚îÇ[0m                                                                                           [31m‚îÇ[0m
[31m‚îÇ[0m    Please run `minikube logs --file=logs.txt` and attach logs.txt to the GitHub issue.    [31m‚îÇ[0m
[31m‚îÇ[0m                                                                                           [31m‚îÇ[0m
[31m‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ[0m

* 
* ==> Docker <==
* -- Logs begin at Sat 2021-09-04 14:30:36 UTC, end at Sat 2021-09-04 14:31:44 UTC. --
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.040060600Z" level=info msg="scheme \"unix\" not registered, fallback to default scheme" module=grpc
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.040151586Z" level=info msg="ccResolverWrapper: sending update to cc: {[{unix:///run/containerd/containerd.sock 0  <nil>}] }" module=grpc
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.040245722Z" level=info msg="ClientConn switching balancer to \"pick_first\"" module=grpc
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.040396173Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc0001e04e0, CONNECTING" module=grpc
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.056779951Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc0001e04e0, READY" module=grpc
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.059080458Z" level=info msg="parsed scheme: \"unix\"" module=grpc
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.059107149Z" level=info msg="scheme \"unix\" not registered, fallback to default scheme" module=grpc
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.059130726Z" level=info msg="ccResolverWrapper: sending update to cc: {[{unix:///run/containerd/containerd.sock 0  <nil>}] }" module=grpc
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.059144417Z" level=info msg="ClientConn switching balancer to \"pick_first\"" module=grpc
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.059295550Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc00089da30, CONNECTING" module=grpc
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.059671003Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc00089da30, READY" module=grpc
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.062718396Z" level=info msg="[graphdriver] using prior storage driver: overlay2"
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.294340081Z" level=warning msg="Your kernel does not support swap memory limit"
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.294362013Z" level=warning msg="Your kernel does not support cgroup rt period"
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.294366837Z" level=warning msg="Your kernel does not support cgroup rt runtime"
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.294370647Z" level=warning msg="Your kernel does not support cgroup blkio weight"
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.294374224Z" level=warning msg="Your kernel does not support cgroup blkio weight_device"
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.294488671Z" level=info msg="Loading containers: start."
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.447683731Z" level=info msg="Default bridge (docker0) is assigned with an IP address 172.18.0.0/16. Daemon option --bip can be used to set a preferred IP address"
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.520248125Z" level=info msg="Loading containers: done."
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.628558631Z" level=info msg="Docker daemon" commit=6a30dfca03 graphdriver(s)=overlay2 version=19.03.2
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.632720782Z" level=info msg="Daemon has completed initialization"
Sep 04 14:30:37 minikube dockerd[120]: time="2021-09-04T14:30:37.667909255Z" level=info msg="API listen on /run/docker.sock"
Sep 04 14:30:37 minikube systemd[1]: Started Docker Application Container Engine.
Sep 04 14:30:38 minikube systemd[1]: docker.service: Current command vanished from the unit file, execution of the command list won't be resumed.
Sep 04 14:30:38 minikube systemd[1]: Stopping Docker Application Container Engine...
Sep 04 14:30:38 minikube dockerd[120]: time="2021-09-04T14:30:38.508203023Z" level=info msg="Processing signal 'terminated'"
Sep 04 14:30:38 minikube dockerd[120]: time="2021-09-04T14:30:38.508993280Z" level=info msg="stopping event stream following graceful shutdown" error="<nil>" module=libcontainerd namespace=moby
Sep 04 14:30:38 minikube dockerd[120]: time="2021-09-04T14:30:38.509463665Z" level=info msg="Daemon shutdown complete"
Sep 04 14:30:38 minikube systemd[1]: docker.service: Succeeded.
Sep 04 14:30:38 minikube systemd[1]: Stopped Docker Application Container Engine.
Sep 04 14:30:38 minikube systemd[1]: Starting Docker Application Container Engine...
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.546814027Z" level=info msg="Starting up"
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.548266071Z" level=info msg="parsed scheme: \"unix\"" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.548288382Z" level=info msg="scheme \"unix\" not registered, fallback to default scheme" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.548301283Z" level=info msg="ccResolverWrapper: sending update to cc: {[{unix:///run/containerd/containerd.sock 0  <nil>}] }" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.548309448Z" level=info msg="ClientConn switching balancer to \"pick_first\"" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.548360646Z" level=info msg="blockingPicker: the picked transport is not ready, loop back to repick" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.548420087Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc000629fd0, CONNECTING" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.548645931Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc000629fd0, READY" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.549101027Z" level=info msg="parsed scheme: \"unix\"" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.549122727Z" level=info msg="scheme \"unix\" not registered, fallback to default scheme" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.549136301Z" level=info msg="ccResolverWrapper: sending update to cc: {[{unix:///run/containerd/containerd.sock 0  <nil>}] }" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.549147970Z" level=info msg="ClientConn switching balancer to \"pick_first\"" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.549184631Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc0008a7380, CONNECTING" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.549315168Z" level=info msg="pickfirstBalancer: HandleSubConnStateChange: 0xc0008a7380, READY" module=grpc
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.551370761Z" level=info msg="[graphdriver] using prior storage driver: overlay2"
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.593795684Z" level=warning msg="Your kernel does not support swap memory limit"
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.593864509Z" level=warning msg="Your kernel does not support cgroup rt period"
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.593893091Z" level=warning msg="Your kernel does not support cgroup rt runtime"
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.593913486Z" level=warning msg="Your kernel does not support cgroup blkio weight"
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.593933401Z" level=warning msg="Your kernel does not support cgroup blkio weight_device"
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.594282505Z" level=info msg="Loading containers: start."
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.825447566Z" level=info msg="Default bridge (docker0) is assigned with an IP address 172.18.0.0/16. Daemon option --bip can be used to set a preferred IP address"
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.914497365Z" level=info msg="Loading containers: done."
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.950118127Z" level=info msg="Docker daemon" commit=6a30dfca03 graphdriver(s)=overlay2 version=19.03.2
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.950160557Z" level=info msg="Daemon has completed initialization"
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.968314450Z" level=info msg="API listen on /var/run/docker.sock"
Sep 04 14:30:38 minikube dockerd[388]: time="2021-09-04T14:30:38.968322068Z" level=info msg="API listen on [::]:2376"
Sep 04 14:30:38 minikube systemd[1]: Started Docker Application Container Engine.

* 
* ==> container status <==
* time="2021-09-04T14:31:46Z" level=fatal msg="failed to connect: failed to connect, make sure you are running as root and the runtime has been started: context deadline exceeded"
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES

* 
* ==> describe nodes <==
* 
* ==> dmesg <==
* [  +0.000020] mce: CPU5: Package temperature above threshold, cpu clock throttled (total events = 14326)
[  +0.000001] mce: CPU4: Package temperature above threshold, cpu clock throttled (total events = 14326)
[  +0.000001] mce: CPU0: Package temperature above threshold, cpu clock throttled (total events = 14326)
[  +0.000003] mce: CPU2: Package temperature above threshold, cpu clock throttled (total events = 14326)
[  +0.000001] mce: CPU6: Package temperature above threshold, cpu clock throttled (total events = 14326)
[  +0.000001] mce: CPU3: Package temperature above threshold, cpu clock throttled (total events = 14326)
[  +0.000001] mce: CPU7: Package temperature above threshold, cpu clock throttled (total events = 14326)
[Sep 4 14:09] mce: CPU5: Package temperature above threshold, cpu clock throttled (total events = 14737)
[  +0.000001] mce: CPU7: Package temperature above threshold, cpu clock throttled (total events = 14737)
[  +0.000020] mce: CPU3: Package temperature above threshold, cpu clock throttled (total events = 14737)
[  +0.000001] mce: CPU1: Package temperature above threshold, cpu clock throttled (total events = 14737)
[  +0.000005] mce: CPU2: Package temperature above threshold, cpu clock throttled (total events = 14737)
[  +0.000001] mce: CPU0: Package temperature above threshold, cpu clock throttled (total events = 14737)
[  +0.000001] mce: CPU4: Package temperature above threshold, cpu clock throttled (total events = 14737)
[  +0.000000] mce: CPU6: Package temperature above threshold, cpu clock throttled (total events = 14737)
[Sep 4 14:14] mce: CPU4: Package temperature above threshold, cpu clock throttled (total events = 14982)
[  +0.000000] mce: CPU0: Package temperature above threshold, cpu clock throttled (total events = 14982)
[  +0.000029] mce: CPU1: Package temperature above threshold, cpu clock throttled (total events = 14982)
[  +0.000001] mce: CPU6: Package temperature above threshold, cpu clock throttled (total events = 14982)
[  +0.000001] mce: CPU2: Package temperature above threshold, cpu clock throttled (total events = 14982)
[  +0.000000] mce: CPU5: Package temperature above threshold, cpu clock throttled (total events = 14982)
[  +0.000001] mce: CPU3: Package temperature above threshold, cpu clock throttled (total events = 14982)
[  +0.000001] mce: CPU7: Package temperature above threshold, cpu clock throttled (total events = 14982)
[Sep 4 14:15] iwlwifi 0000:03:00.0: No beacon heard and the time event is over already...
[  +9.881825] iwlwifi 0000:03:00.0: No beacon heard and the time event is over already...
[Sep 4 14:19] mce: CPU0: Package temperature above threshold, cpu clock throttled (total events = 15602)
[  +0.000000] mce: CPU4: Package temperature above threshold, cpu clock throttled (total events = 15602)
[  +0.000044] mce: CPU2: Package temperature above threshold, cpu clock throttled (total events = 15602)
[  +0.000001] mce: CPU5: Package temperature above threshold, cpu clock throttled (total events = 15602)
[  +0.000000] mce: CPU6: Package temperature above threshold, cpu clock throttled (total events = 15602)
[  +0.000001] mce: CPU1: Package temperature above threshold, cpu clock throttled (total events = 15602)
[  +0.000001] mce: CPU7: Package temperature above threshold, cpu clock throttled (total events = 15602)
[  +0.000001] mce: CPU3: Package temperature above threshold, cpu clock throttled (total events = 15602)
[Sep 4 14:20] mce: CPU6: Core temperature above threshold, cpu clock throttled (total events = 5362)
[  +0.000020] mce: CPU2: Core temperature above threshold, cpu clock throttled (total events = 5362)
[Sep 4 14:22] mce: CPU0: Core temperature above threshold, cpu clock throttled (total events = 5248)
[  +0.000001] mce: CPU4: Core temperature above threshold, cpu clock throttled (total events = 5248)
[Sep 4 14:23] iwlwifi 0000:03:00.0: Unhandled alg: 0x71b
[Sep 4 14:24] mce: CPU2: Package temperature above threshold, cpu clock throttled (total events = 15981)
[  +0.000001] mce: CPU6: Package temperature above threshold, cpu clock throttled (total events = 15981)
[  +0.000029] mce: CPU0: Package temperature above threshold, cpu clock throttled (total events = 15981)
[  +0.000001] mce: CPU4: Package temperature above threshold, cpu clock throttled (total events = 15981)
[  +0.000001] mce: CPU3: Package temperature above threshold, cpu clock throttled (total events = 15981)
[  +0.000000] mce: CPU7: Package temperature above threshold, cpu clock throttled (total events = 15981)
[  +0.000001] mce: CPU5: Package temperature above threshold, cpu clock throttled (total events = 15981)
[  +0.000001] mce: CPU1: Package temperature above threshold, cpu clock throttled (total events = 15981)
[Sep 4 14:25] vboxnetflt: 0 out of 28 packets were not sent (directed to host)
[Sep 4 14:26] mce: CPU6: Core temperature above threshold, cpu clock throttled (total events = 5396)
[  +0.000001] mce: CPU2: Core temperature above threshold, cpu clock throttled (total events = 5396)
[Sep 4 14:27] mce: CPU0: Core temperature above threshold, cpu clock throttled (total events = 5497)
[  +0.000001] mce: CPU4: Core temperature above threshold, cpu clock throttled (total events = 5497)
[Sep 4 14:30] kauditd_printk_skb: 13 callbacks suppressed
[ +12.552108] mce: CPU2: Package temperature above threshold, cpu clock throttled (total events = 17615)
[  +0.000001] mce: CPU6: Package temperature above threshold, cpu clock throttled (total events = 17615)
[  +0.000001] mce: CPU7: Package temperature above threshold, cpu clock throttled (total events = 17615)
[  +0.000001] mce: CPU4: Package temperature above threshold, cpu clock throttled (total events = 17615)
[  +0.000001] mce: CPU1: Package temperature above threshold, cpu clock throttled (total events = 17615)
[  +0.000001] mce: CPU0: Package temperature above threshold, cpu clock throttled (total events = 17615)
[  +0.000001] mce: CPU5: Package temperature above threshold, cpu clock throttled (total events = 17615)
[  +0.000000] mce: CPU3: Package temperature above threshold, cpu clock throttled (total events = 17615)

* 
* ==> kernel <==
*  14:31:46 up  4:47,  0 users,  load average: 2.36, 1.61, 1.44
Linux minikube 5.4.0-81-generic #91-Ubuntu SMP Thu Jul 15 19:09:17 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
PRETTY_NAME="Ubuntu 19.10"

* 
* ==> kubelet <==
* -- Logs begin at Sat 2021-09-04 14:30:36 UTC, end at Sat 2021-09-04 14:31:46 UTC. --
Sep 04 14:31:42 minikube systemd[1]: kubelet.service: Service RestartSec=600ms expired, scheduling restart.
Sep 04 14:31:42 minikube systemd[1]: kubelet.service: Scheduled restart job, restart counter is at 68.
Sep 04 14:31:42 minikube systemd[1]: Stopped kubelet: The Kubernetes Node Agent.
Sep 04 14:31:42 minikube systemd[1]: Started kubelet: The Kubernetes Node Agent.
Sep 04 14:31:42 minikube kubelet[2855]: I0904 14:31:42.507147    2855 server.go:417] Version: v1.18.2
Sep 04 14:31:42 minikube kubelet[2855]: I0904 14:31:42.507754    2855 plugins.go:100] No cloud provider specified.
Sep 04 14:31:42 minikube kubelet[2855]: I0904 14:31:42.507824    2855 server.go:837] Client rotation is on, will bootstrap in background
Sep 04 14:31:42 minikube kubelet[2855]: F0904 14:31:42.507863    2855 server.go:274] failed to run Kubelet: unable to load bootstrap kubeconfig: stat /etc/kubernetes/bootstrap-kubelet.conf: no such file or directory
Sep 04 14:31:42 minikube systemd[1]: kubelet.service: Main process exited, code=exited, status=255/EXCEPTION
Sep 04 14:31:42 minikube systemd[1]: kubelet.service: Failed with result 'exit-code'.
Sep 04 14:31:43 minikube systemd[1]: kubelet.service: Service RestartSec=600ms expired, scheduling restart.
Sep 04 14:31:43 minikube systemd[1]: kubelet.service: Scheduled restart job, restart counter is at 69.
Sep 04 14:31:43 minikube systemd[1]: Stopped kubelet: The Kubernetes Node Agent.
Sep 04 14:31:43 minikube systemd[1]: Started kubelet: The Kubernetes Node Agent.
Sep 04 14:31:43 minikube kubelet[2868]: I0904 14:31:43.249117    2868 server.go:417] Version: v1.18.2
Sep 04 14:31:43 minikube kubelet[2868]: I0904 14:31:43.249383    2868 plugins.go:100] No cloud provider specified.
Sep 04 14:31:43 minikube kubelet[2868]: I0904 14:31:43.249397    2868 server.go:837] Client rotation is on, will bootstrap in background
Sep 04 14:31:43 minikube kubelet[2868]: F0904 14:31:43.249427    2868 server.go:274] failed to run Kubelet: unable to load bootstrap kubeconfig: stat /etc/kubernetes/bootstrap-kubelet.conf: no such file or directory
Sep 04 14:31:43 minikube systemd[1]: kubelet.service: Main process exited, code=exited, status=255/EXCEPTION
Sep 04 14:31:43 minikube systemd[1]: kubelet.service: Failed with result 'exit-code'.
Sep 04 14:31:43 minikube systemd[1]: kubelet.service: Service RestartSec=600ms expired, scheduling restart.
Sep 04 14:31:43 minikube systemd[1]: kubelet.service: Scheduled restart job, restart counter is at 70.
Sep 04 14:31:43 minikube systemd[1]: Stopped kubelet: The Kubernetes Node Agent.
Sep 04 14:31:43 minikube systemd[1]: Started kubelet: The Kubernetes Node Agent.
Sep 04 14:31:43 minikube kubelet[2882]: I0904 14:31:43.994412    2882 server.go:417] Version: v1.18.2
Sep 04 14:31:43 minikube kubelet[2882]: I0904 14:31:43.994646    2882 plugins.go:100] No cloud provider specified.
Sep 04 14:31:43 minikube kubelet[2882]: I0904 14:31:43.994659    2882 server.go:837] Client rotation is on, will bootstrap in background
Sep 04 14:31:43 minikube kubelet[2882]: F0904 14:31:43.994680    2882 server.go:274] failed to run Kubelet: unable to load bootstrap kubeconfig: stat /etc/kubernetes/bootstrap-kubelet.conf: no such file or directory
Sep 04 14:31:43 minikube systemd[1]: kubelet.service: Main process exited, code=exited, status=255/EXCEPTION
Sep 04 14:31:43 minikube systemd[1]: kubelet.service: Failed with result 'exit-code'.
Sep 04 14:31:44 minikube systemd[1]: kubelet.service: Service RestartSec=600ms expired, scheduling restart.
Sep 04 14:31:44 minikube systemd[1]: kubelet.service: Scheduled restart job, restart counter is at 71.
Sep 04 14:31:44 minikube systemd[1]: Stopped kubelet: The Kubernetes Node Agent.
Sep 04 14:31:44 minikube systemd[1]: Started kubelet: The Kubernetes Node Agent.
Sep 04 14:31:44 minikube kubelet[3008]: I0904 14:31:44.766908    3008 server.go:417] Version: v1.18.2
Sep 04 14:31:44 minikube kubelet[3008]: I0904 14:31:44.767466    3008 plugins.go:100] No cloud provider specified.
Sep 04 14:31:44 minikube kubelet[3008]: I0904 14:31:44.767485    3008 server.go:837] Client rotation is on, will bootstrap in background
Sep 04 14:31:44 minikube kubelet[3008]: F0904 14:31:44.767514    3008 server.go:274] failed to run Kubelet: unable to load bootstrap kubeconfig: stat /etc/kubernetes/bootstrap-kubelet.conf: no such file or directory
Sep 04 14:31:44 minikube systemd[1]: kubelet.service: Main process exited, code=exited, status=255/EXCEPTION
Sep 04 14:31:44 minikube systemd[1]: kubelet.service: Failed with result 'exit-code'.
Sep 04 14:31:45 minikube systemd[1]: kubelet.service: Service RestartSec=600ms expired, scheduling restart.
Sep 04 14:31:45 minikube systemd[1]: kubelet.service: Scheduled restart job, restart counter is at 72.
Sep 04 14:31:45 minikube systemd[1]: Stopped kubelet: The Kubernetes Node Agent.
Sep 04 14:31:45 minikube systemd[1]: Started kubelet: The Kubernetes Node Agent.
Sep 04 14:31:45 minikube kubelet[3023]: I0904 14:31:45.528066    3023 server.go:417] Version: v1.18.2
Sep 04 14:31:45 minikube kubelet[3023]: I0904 14:31:45.528294    3023 plugins.go:100] No cloud provider specified.
Sep 04 14:31:45 minikube kubelet[3023]: I0904 14:31:45.528304    3023 server.go:837] Client rotation is on, will bootstrap in background
Sep 04 14:31:45 minikube kubelet[3023]: F0904 14:31:45.528325    3023 server.go:274] failed to run Kubelet: unable to load bootstrap kubeconfig: stat /etc/kubernetes/bootstrap-kubelet.conf: no such file or directory
Sep 04 14:31:45 minikube systemd[1]: kubelet.service: Main process exited, code=exited, status=255/EXCEPTION
Sep 04 14:31:45 minikube systemd[1]: kubelet.service: Failed with result 'exit-code'.
Sep 04 14:31:46 minikube systemd[1]: kubelet.service: Service RestartSec=600ms expired, scheduling restart.
Sep 04 14:31:46 minikube systemd[1]: kubelet.service: Scheduled restart job, restart counter is at 73.
Sep 04 14:31:46 minikube systemd[1]: Stopped kubelet: The Kubernetes Node Agent.
Sep 04 14:31:46 minikube systemd[1]: Started kubelet: The Kubernetes Node Agent.
Sep 04 14:31:46 minikube kubelet[3037]: I0904 14:31:46.246260    3037 server.go:417] Version: v1.18.2
Sep 04 14:31:46 minikube kubelet[3037]: I0904 14:31:46.246600    3037 plugins.go:100] No cloud provider specified.
Sep 04 14:31:46 minikube kubelet[3037]: I0904 14:31:46.246616    3037 server.go:837] Client rotation is on, will bootstrap in background
Sep 04 14:31:46 minikube kubelet[3037]: F0904 14:31:46.246651    3037 server.go:274] failed to run Kubelet: unable to load bootstrap kubeconfig: stat /etc/kubernetes/bootstrap-kubelet.conf: no such file or directory
Sep 04 14:31:46 minikube systemd[1]: kubelet.service: Main process exited, code=exited, status=255/EXCEPTION
Sep 04 14:31:46 minikube systemd[1]: kubelet.service: Failed with result 'exit-code'.

